{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"text_summary","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPjKxZg+nRqV4nFRaSwLu3o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Zm6E9o16Oc3W","colab_type":"code","outputId":"885f360e-faa7-4537-dfd8-95c712c80f23","executionInfo":{"status":"ok","timestamp":1584177680056,"user_tz":-330,"elapsed":22530,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","#%cd My Drive/FINAL_YEAR_PROJECT/Text-Summarization-master"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4mt6P8VJy1et","colab_type":"code","outputId":"506f7d77-5810-4bc7-821d-a3e815cc8a8d","executionInfo":{"status":"ok","timestamp":1584177692935,"user_tz":-330,"elapsed":2215,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%cd /gdrive/My Drive/FINAL_YEAR_PROJECT/PROJECT/Text-Summarization-master"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/gdrive/My Drive/FINAL_YEAR_PROJECT/PROJECT/Text-Summarization-master\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pyv9g-gvzSls","colab_type":"code","outputId":"3a041c2a-a480-4c27-c5a7-1f7b40285c99","executionInfo":{"status":"error","timestamp":1584338700476,"user_tz":-330,"elapsed":1308,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":459}},"source":["\n","# coding: utf-8\n","\n","# # Summarizing Text with Amazon Reviews\n","\n","# The objective of this project is to build a model that can create relevant summaries for reviews written about fine foods sold on Amazon. This dataset contains above 500,000 reviews, and is hosted on [Kaggle.](https://www.kaggle.com/snap/amazon-fine-food-reviews)\n","# \n","# To build our model we will use a two-layered bidirectional RNN with LSTMs on the input data and two layers, each with an LSTM using bahdanau attention on the target data. [Jaemin Cho's tutorial](https://github.com/j-min/tf_tutorial_plus/tree/master/RNN_seq2seq/contrib_seq2seq) for seq2seq was really helpful to get the code in working order because this is my first project with TensorFlow 1.1; some of the functions are very different from 1.0. The architecture for this model is similar to Xin Pan's and Peter Liu's, here's their [GitHub page.](https://github.com/tensorflow/models/tree/master/textsum)\n","# \n","# The sections of this project are:\n","# - Inspecting the Data\n","# - Preparing the Data\n","# - Building the Model\n","# - Training the Model\n","# - Making Our Own Summaries\n","\n","# In[49]:\n","\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import re\n","import nltk\n","nltk.download('stopwords')\n","from nltk.corpus import stopwords\n","import time\n","from tensorflow.python.layers.core import Dense\n","from tensorflow.python.ops.rnn_cell_impl import _zero_state_tensors\n","print('TensorFlow Version: {}'.format(tf.__version__))\n","\n","\n","# ## Insepcting the Data\n","\n","# In[2]:\n","\n","reviews = pd.read_csv(r'Reviews.csv')\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","TensorFlow Version: 1.15.0\n"],"name":"stdout"},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-22ba2fbbaa73>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# In[2]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mreviews\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr'Reviews.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    683\u001b[0m         )\n\u001b[1;32m    684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 685\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1135\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1136\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1917\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'Reviews.csv' does not exist: b'Reviews.csv'"]}]},{"cell_type":"code","metadata":{"id":"DuKMWZtP1Qbc","colab_type":"code","colab":{}},"source":["# Remove null values and unneeded features\n","reviews = reviews.dropna()\n","reviews = reviews.drop(['Id','ProductId','UserId','ProfileName','HelpfulnessNumerator','HelpfulnessDenominator',\n","                        'Score','Time'], 1)\n","reviews = reviews.reset_index(drop=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MILzJ9Y91i4U","colab_type":"code","outputId":"2e4878eb-734a-4a60-870d-bbbe8e12e4d8","executionInfo":{"status":"ok","timestamp":1584177709225,"user_tz":-330,"elapsed":920,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["reviews.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Summary</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Good Quality Dog Food</td>\n","      <td>I have bought several of the Vitality canned d...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Not as Advertised</td>\n","      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>\"Delight\" says it all</td>\n","      <td>This is a confection that has been around a fe...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Cough Medicine</td>\n","      <td>If you are looking for the secret ingredient i...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Great taffy</td>\n","      <td>Great taffy at a great price.  There was a wid...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Summary                                               Text\n","0  Good Quality Dog Food  I have bought several of the Vitality canned d...\n","1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...\n","2  \"Delight\" says it all  This is a confection that has been around a fe...\n","3         Cough Medicine  If you are looking for the secret ingredient i...\n","4            Great taffy  Great taffy at a great price.  There was a wid..."]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"7nOItyC31jDZ","colab_type":"code","colab":{}},"source":["# A list of contractions from http://stackoverflow.com/questions/19790188/expanding-english-language-contractions-in-python\n","contractions = { \n","\"ain't\": \"am not\",\n","\"aren't\": \"are not\",\n","\"can't\": \"cannot\",\n","\"can't've\": \"cannot have\",\n","\"'cause\": \"because\",\n","\"could've\": \"could have\",\n","\"couldn't\": \"could not\",\n","\"couldn't've\": \"could not have\",\n","\"didn't\": \"did not\",\n","\"doesn't\": \"does not\",\n","\"don't\": \"do not\",\n","\"hadn't\": \"had not\",\n","\"hadn't've\": \"had not have\",\n","\"hasn't\": \"has not\",\n","\"haven't\": \"have not\",\n","\"he'd\": \"he would\",\n","\"he'd've\": \"he would have\",\n","\"he'll\": \"he will\",\n","\"he's\": \"he is\",\n","\"how'd\": \"how did\",\n","\"how'll\": \"how will\",\n","\"how's\": \"how is\",\n","\"i'd\": \"i would\",\n","\"i'll\": \"i will\",\n","\"i'm\": \"i am\",\n","\"i've\": \"i have\",\n","\"isn't\": \"is not\",\n","\"it'd\": \"it would\",\n","\"it'll\": \"it will\",\n","\"it's\": \"it is\",\n","\"let's\": \"let us\",\n","\"ma'am\": \"madam\",\n","\"mayn't\": \"may not\",\n","\"might've\": \"might have\",\n","\"mightn't\": \"might not\",\n","\"must've\": \"must have\",\n","\"mustn't\": \"must not\",\n","\"needn't\": \"need not\",\n","\"oughtn't\": \"ought not\",\n","\"shan't\": \"shall not\",\n","\"sha'n't\": \"shall not\",\n","\"she'd\": \"she would\",\n","\"she'll\": \"she will\",\n","\"she's\": \"she is\",\n","\"should've\": \"should have\",\n","\"shouldn't\": \"should not\",\n","\"that'd\": \"that would\",\n","\"that's\": \"that is\",\n","\"there'd\": \"there had\",\n","\"there's\": \"there is\",\n","\"they'd\": \"they would\",\n","\"they'll\": \"they will\",\n","\"they're\": \"they are\",\n","\"they've\": \"they have\",\n","\"wasn't\": \"was not\",\n","\"we'd\": \"we would\",\n","\"we'll\": \"we will\",\n","\"we're\": \"we are\",\n","\"we've\": \"we have\",\n","\"weren't\": \"were not\",\n","\"what'll\": \"what will\",\n","\"what're\": \"what are\",\n","\"what's\": \"what is\",\n","\"what've\": \"what have\",\n","\"where'd\": \"where did\",\n","\"where's\": \"where is\",\n","\"who'll\": \"who will\",\n","\"who's\": \"who is\",\n","\"won't\": \"will not\",\n","\"wouldn't\": \"would not\",\n","\"you'd\": \"you would\",\n","\"you'll\": \"you will\",\n","\"you're\": \"you are\"\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"idZB7Cn_1jL-","colab_type":"code","colab":{}},"source":["def clean_text(text, remove_stopwords = True):\n","    '''Remove unwanted characters, stopwords, and format the text to create fewer nulls word embeddings'''\n","    \n","    # Convert words to lower case\n","    text = text.lower()\n","    \n","    # Replace contractions with their longer forms \n","    if True:\n","        text = text.split()\n","        new_text = []\n","        for word in text:\n","            if word in contractions:\n","                new_text.append(contractions[word])\n","            else:\n","                new_text.append(word)\n","        text = \" \".join(new_text)\n","    \n","    # Format words and remove unwanted characters\n","    text = re.sub(r'https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n","    text = re.sub(r'\\<a href', ' ', text)\n","    text = re.sub(r'&amp;', '', text) \n","    text = re.sub(r'[_\"\\-;%()|+&=*%.,!?:#$@\\[\\]/]', ' ', text)\n","    text = re.sub(r'<br />', ' ', text)\n","    text = re.sub(r'\\'', ' ', text)\n","    \n","    # Optionally, remove stop words\n","    if remove_stopwords:\n","        text = text.split()\n","        stops = set(stopwords.words(\"english\"))\n","        text = [w for w in text if not w in stops]\n","        text = \" \".join(text)\n","\n","    return text"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iHYqKGRe1jPx","colab_type":"code","outputId":"d1c86079-3b8b-4776-b03e-e9016d474cf8","executionInfo":{"status":"ok","timestamp":1584177836722,"user_tz":-330,"elapsed":122607,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Clean the summaries and texts\n","clean_summaries = []\n","for summary in reviews.Summary:\n","    clean_summaries.append(clean_text(summary, remove_stopwords=False))\n","print(\"Summaries are complete.\")\n","\n","clean_texts = []\n","for text in reviews.Text:\n","    clean_texts.append(clean_text(text))\n","print(\"Texts are complete.\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Summaries are complete.\n","Texts are complete.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_QxUjdu91jTv","colab_type":"code","outputId":"0e1fb03f-7dac-4530-97ef-560e56bd6206","executionInfo":{"status":"ok","timestamp":1584177840210,"user_tz":-330,"elapsed":1088,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["# Inspect the cleaned summaries and texts to ensure they have been cleaned well\n","for i in range(5):\n","    print(\"Clean Review #\",i+1)\n","    print(clean_summaries[i])\n","    print(clean_texts[i])\n","    print()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Clean Review # 1\n","good quality dog food\n","bought several vitality canned dog food products found good quality product looks like stew processed meat smells better labrador finicky appreciates product better\n","\n","Clean Review # 2\n","not as advertised\n","product arrived labeled jumbo salted peanuts peanuts actually small sized unsalted sure error vendor intended represent product jumbo\n","\n","Clean Review # 3\n"," delight  says it all\n","confection around centuries light pillowy citrus gelatin nuts case filberts cut tiny squares liberally coated powdered sugar tiny mouthful heaven chewy flavorful highly recommend yummy treat familiar story c lewis lion witch wardrobe treat seduces edmund selling brother sisters witch\n","\n","Clean Review # 4\n","cough medicine\n","looking secret ingredient robitussin believe found got addition root beer extract ordered good made cherry soda flavor medicinal\n","\n","Clean Review # 5\n","great taffy\n","great taffy great price wide assortment yummy taffy delivery quick taffy lover deal\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pBKG2gra1jXG","colab_type":"code","colab":{}},"source":["def count_words(count_dict, text):\n","    '''Count the number of occurrences of each word in a set of text'''\n","    for sentence in text:\n","        for word in sentence.split():\n","            if word not in count_dict:\n","                count_dict[word] = 1\n","            else:\n","                count_dict[word] += 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eg_rtF2K1jbC","colab_type":"code","outputId":"ae6469c5-024e-4b44-de23-9041c17b607d","executionInfo":{"status":"ok","timestamp":1584177851481,"user_tz":-330,"elapsed":8733,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Find the number of times each word was used and the size of the vocabulary\n","word_counts = {}\n","\n","count_words(word_counts, clean_summaries)\n","count_words(word_counts, clean_texts)\n","            \n","print(\"Size of Vocabulary:\", len(word_counts))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Size of Vocabulary: 132884\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"E59CqRY61jeu","colab_type":"code","outputId":"932bece9-ed72-4d67-9a28-d3a96271f998","executionInfo":{"status":"ok","timestamp":1584177898801,"user_tz":-330,"elapsed":44301,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Load Conceptnet Numberbatch's (CN) embeddings, similar to GloVe, but probably better \n","# (https://github.com/commonsense/conceptnet-numberbatch)\n","embeddings_index = {}\n","with open(r'numberbatch-en-17.02.txt', encoding='utf-8') as f:\n","    for line in f:\n","        values = line.split(' ')\n","        word = values[0]\n","        embedding = np.asarray(values[1:], dtype='float32')\n","        embeddings_index[word] = embedding\n","\n","print('Word embeddings:', len(embeddings_index))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Word embeddings: 484557\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"e-TkeJg72T8k","colab_type":"code","outputId":"be0e6d03-632d-47e4-c30b-bd8f7a9f9f2b","executionInfo":{"status":"ok","timestamp":1584177902918,"user_tz":-330,"elapsed":919,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Find the number of words that are missing from CN, and are used more than our threshold.\n","missing_words = 0\n","threshold = 20\n","\n","for word, count in word_counts.items():\n","    if count > threshold:\n","        if word not in embeddings_index:\n","            missing_words += 1\n","            \n","missing_ratio = round(missing_words/len(word_counts),4)*100\n","            \n","print(\"Number of words missing from CN:\", missing_words)\n","print(\"Percent of words that are missing from vocabulary: {}%\".format(missing_ratio))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Number of words missing from CN: 3044\n","Percent of words that are missing from vocabulary: 2.29%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7rKrcznu2UAz","colab_type":"code","outputId":"77d4f831-d856-492c-e21d-0153a3f25bf8","executionInfo":{"status":"ok","timestamp":1584177904832,"user_tz":-330,"elapsed":922,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# Limit the vocab that we will use to words that appear ≥ threshold or are in GloVe\n","\n","#dictionary to convert words to integers\n","vocab_to_int = {} \n","\n","value = 0\n","for word, count in word_counts.items():\n","    if count >= threshold or word in embeddings_index:\n","        vocab_to_int[word] = value\n","        value += 1\n","\n","# Special tokens that will be added to our vocab\n","codes = [\"<UNK>\",\"<PAD>\",\"<EOS>\",\"<GO>\"]   \n","\n","# Add codes to vocab\n","for code in codes:\n","    vocab_to_int[code] = len(vocab_to_int)\n","\n","# Dictionary to convert integers to words\n","int_to_vocab = {}\n","for word, value in vocab_to_int.items():\n","    int_to_vocab[value] = word\n","\n","usage_ratio = round(len(vocab_to_int) / len(word_counts),4)*100\n","\n","print(\"Total number of unique words:\", len(word_counts))\n","print(\"Number of words we will use:\", len(vocab_to_int))\n","print(\"Percent of words we will use: {}%\".format(usage_ratio))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Total number of unique words: 132884\n","Number of words we will use: 65469\n","Percent of words we will use: 49.27%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cr2tlKm72UET","colab_type":"code","outputId":"afb0c1d4-efa6-465d-f1ce-fa6050fc7686","executionInfo":{"status":"ok","timestamp":1584177906672,"user_tz":-330,"elapsed":1039,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Need to use 300 for embedding dimensions to match CN's vectors.\n","embedding_dim = 300\n","nb_words = len(vocab_to_int)\n","\n","# Create matrix with default values of zero\n","word_embedding_matrix = np.zeros((nb_words, embedding_dim), dtype=np.float32)\n","for word, i in vocab_to_int.items():\n","    if word in embeddings_index:\n","        word_embedding_matrix[i] = embeddings_index[word]\n","    else:\n","        # If word not in CN, create a random embedding for it\n","        new_embedding = np.array(np.random.uniform(-1.0, 1.0, embedding_dim))\n","        embeddings_index[word] = new_embedding\n","        word_embedding_matrix[i] = new_embedding\n","\n","# Check if value matches len(vocab_to_int)\n","print(len(word_embedding_matrix))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["65469\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jpnv5w9W2UHs","colab_type":"code","colab":{}},"source":["def convert_to_ints(text, word_count, unk_count, eos=False):\n","    '''Convert words in text to an integer.\n","       If word is not in vocab_to_int, use UNK's integer.\n","       Total the number of words and UNKs.\n","       Add EOS token to the end of texts'''\n","    ints = []\n","    for sentence in text:\n","        sentence_ints = []\n","        for word in sentence.split():\n","            word_count += 1\n","            if word in vocab_to_int:\n","                sentence_ints.append(vocab_to_int[word])\n","            else:\n","                sentence_ints.append(vocab_to_int[\"<UNK>\"])\n","                unk_count += 1\n","        if eos:\n","            sentence_ints.append(vocab_to_int[\"<EOS>\"])\n","        ints.append(sentence_ints)\n","    return ints, word_count, unk_count"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qvHmc5bu2ULM","colab_type":"code","outputId":"5fd02fa1-6790-48f0-ea06-ca23e6fd3013","executionInfo":{"status":"ok","timestamp":1584177922046,"user_tz":-330,"elapsed":12606,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# Apply convert_to_ints to clean_summaries and clean_texts\n","word_count = 0\n","unk_count = 0\n","\n","int_summaries, word_count, unk_count = convert_to_ints(clean_summaries, word_count, unk_count)\n","int_texts, word_count, unk_count = convert_to_ints(clean_texts, word_count, unk_count, eos=True)\n","\n","unk_percent = round(unk_count/word_count,4)*100\n","\n","print(\"Total number of words in headlines:\", word_count)\n","print(\"Total number of UNKs in headlines:\", unk_count)\n","print(\"Percent of words that are UNK: {}%\".format(unk_percent))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Total number of words in headlines: 25679933\n","Total number of UNKs in headlines: 170450\n","Percent of words that are UNK: 0.66%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"peGebNOR2UO6","colab_type":"code","colab":{}},"source":["def create_lengths(text):\n","    '''Create a data frame of the sentence lengths from a text'''\n","    lengths = []\n","    for sentence in text:\n","        lengths.append(len(sentence))\n","    return pd.DataFrame(lengths, columns=['counts'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KossE2fE2USX","colab_type":"code","outputId":"53ab7ce2-c616-4be0-a7f8-db4a7702ba4a","executionInfo":{"status":"ok","timestamp":1584177926439,"user_tz":-330,"elapsed":1347,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["lengths_summaries = create_lengths(int_summaries)\n","lengths_texts = create_lengths(int_texts)\n","\n","print(\"Summaries:\")\n","print(lengths_summaries.describe())\n","print()\n","print(\"Texts:\")\n","print(lengths_texts.describe())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Summaries:\n","              counts\n","count  568411.000000\n","mean        4.181624\n","std         2.657872\n","min         0.000000\n","25%         2.000000\n","50%         4.000000\n","75%         5.000000\n","max        48.000000\n","\n","Texts:\n","              counts\n","count  568411.000000\n","mean       41.996835\n","std        42.520873\n","min         1.000000\n","25%        18.000000\n","50%        29.000000\n","75%        50.000000\n","max      2085.000000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"13E8qXJX2UVj","colab_type":"code","outputId":"797f7db8-8927-4d78-800d-664b4714fa06","executionInfo":{"status":"ok","timestamp":1584177927572,"user_tz":-330,"elapsed":630,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# Inspect the length of texts\n","print(np.percentile(lengths_texts.counts, 90))\n","print(np.percentile(lengths_texts.counts, 95))\n","print(np.percentile(lengths_texts.counts, 99))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["84.0\n","115.0\n","207.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bxzk8rfB2UY9","colab_type":"code","outputId":"13579717-c512-4707-e095-6655b6087eb4","executionInfo":{"status":"ok","timestamp":1584177929213,"user_tz":-330,"elapsed":888,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# Inspect the length of summaries\n","print(np.percentile(lengths_summaries.counts, 90))\n","print(np.percentile(lengths_summaries.counts, 95))\n","print(np.percentile(lengths_summaries.counts, 99))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["8.0\n","9.0\n","13.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oP2TPani2Ucw","colab_type":"code","colab":{}},"source":["def unk_counter(sentence):\n","    '''Counts the number of time UNK appears in a sentence.'''\n","    unk_count = 0\n","    for word in sentence:\n","        if word == vocab_to_int[\"<UNK>\"]:\n","            unk_count += 1\n","    return unk_count"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hmQNBhLv2Ugz","colab_type":"code","outputId":"513c98a2-7a3e-41f9-df6d-e86af055d344","executionInfo":{"status":"ok","timestamp":1584178156774,"user_tz":-330,"elapsed":225624,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Sort the summaries and texts by the length of the texts, shortest to longest\n","# Limit the length of summaries and texts based on the min and max ranges.\n","# Remove reviews that include too many UNKs\n","\n","sorted_summaries = []\n","sorted_texts = []\n","max_text_length = 84\n","max_summary_length = 13\n","min_length = 2\n","unk_text_limit = 1\n","unk_summary_limit = 0\n","\n","for length in range(min(lengths_texts.counts), max_text_length): \n","    for count, words in enumerate(int_summaries):\n","        if (len(int_summaries[count]) >= min_length and\n","            len(int_summaries[count]) <= max_summary_length and\n","            len(int_texts[count]) >= min_length and\n","            unk_counter(int_summaries[count]) <= unk_summary_limit and\n","            unk_counter(int_texts[count]) <= unk_text_limit and\n","            length == len(int_texts[count])\n","           ):\n","            sorted_summaries.append(int_summaries[count])\n","            sorted_texts.append(int_texts[count])\n","        \n","# Compare lengths to ensure they match\n","print(len(sorted_summaries))\n","print(len(sorted_texts))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["429209\n","429209\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W7bRrBo02Umj","colab_type":"code","colab":{}},"source":["\n","   ## Building the Model\n","   def model_inputs():\n","    '''Create palceholders for inputs to the model'''\n","    \n","    input_data = tf.placeholder(tf.int32, [None, None], name='input')\n","    targets = tf.placeholder(tf.int32, [None, None], name='targets')\n","    lr = tf.placeholder(tf.float32, name='learning_rate')\n","    keep_prob = tf.placeholder(tf.float32, name='keep_prob')\n","    summary_length = tf.placeholder(tf.int32, (None,), name='summary_length')\n","    max_summary_length = tf.reduce_max(summary_length, name='max_dec_len')\n","    text_length = tf.placeholder(tf.int32, (None,), name='text_length')\n","\n","    return input_data, targets, lr, keep_prob, summary_length, max_summary_length, text_length\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_C42KTbF27TE","colab_type":"code","colab":{}},"source":["def process_encoding_input(target_data, vocab_to_int, batch_size):\n","    '''Remove the last word id from each batch and concat the <GO> to the begining of each batch'''\n","    \n","    ending = tf.strided_slice(target_data, [0, 0], [batch_size, -1], [1, 1])\n","    dec_input = tf.concat([tf.fill([batch_size, 1], vocab_to_int['<GO>']), ending], 1)\n","\n","    return dec_input"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EELGGLSB27Ww","colab_type":"code","colab":{}},"source":["def encoding_layer(rnn_size, sequence_length, num_layers, rnn_inputs, keep_prob):\n","    '''Create the encoding layer'''\n","    \n","    for layer in range(num_layers):\n","        with tf.variable_scope('encoder_{}'.format(layer)):\n","            cell_fw = tf.contrib.rnn.LSTMCell(rnn_size,\n","                                              initializer=tf.random_uniform_initializer(-0.1, 0.1, seed=2))\n","            cell_fw = tf.contrib.rnn.DropoutWrapper(cell_fw, \n","                                                    input_keep_prob = keep_prob)\n","\n","            cell_bw = tf.contrib.rnn.LSTMCell(rnn_size,\n","                                              initializer=tf.random_uniform_initializer(-0.1, 0.1, seed=2))\n","            cell_bw = tf.contrib.rnn.DropoutWrapper(cell_bw, \n","                                                    input_keep_prob = keep_prob)\n","\n","            enc_output, enc_state = tf.nn.bidirectional_dynamic_rnn(cell_fw, \n","                                                                    cell_bw, \n","                                                                    rnn_inputs,\n","                                                                    sequence_length,\n","                                                                    dtype=tf.float32)\n","    # Join outputs since we are using a bidirectional RNN\n","    enc_output = tf.concat(enc_output,2)\n","    \n","    return enc_output, enc_state"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"INudxuLM27l-","colab_type":"code","colab":{}},"source":["def training_decoding_layer(dec_embed_input, summary_length, dec_cell, initial_state, output_layer, \n","                            vocab_size, max_summary_length):\n","    '''Create the training logits'''\n","    \n","    training_helper = tf.contrib.seq2seq.TrainingHelper(inputs=dec_embed_input,\n","                                                        sequence_length=summary_length,\n","                                                        time_major=False)\n","\n","    training_decoder = tf.contrib.seq2seq.BasicDecoder(dec_cell,\n","                                                       training_helper,\n","                                                       initial_state,\n","                                                       output_layer) \n","\n","    training_logits, _ ,_ = tf.contrib.seq2seq.dynamic_decode(training_decoder,\n","                                                              output_time_major=False,\n","                                                              impute_finished=True,\n","                                                              maximum_iterations=max_summary_length)\n","    return training_logits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RheaqyRE27o6","colab_type":"code","colab":{}},"source":["def inference_decoding_layer(embeddings, start_token, end_token, dec_cell, initial_state, output_layer,\n","                             max_summary_length, batch_size):\n","    '''Create the inference logits'''\n","    \n","    start_tokens = tf.tile(tf.constant([start_token], dtype=tf.int32), [batch_size], name='start_tokens')\n","    \n","    inference_helper = tf.contrib.seq2seq.GreedyEmbeddingHelper(embeddings,\n","                                                                start_tokens,\n","                                                                end_token)\n","                \n","    inference_decoder = tf.contrib.seq2seq.BasicDecoder(dec_cell,\n","                                                        inference_helper,\n","                                                        initial_state,\n","                                                        output_layer)\n","                \n","    inference_logits, _ ,_ = tf.contrib.seq2seq.dynamic_decode(inference_decoder,\n","                                                               output_time_major=False,\n","                                                               impute_finished=True,\n","                                                               maximum_iterations=max_summary_length)\n","    \n","    return inference_logits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VUGqVDj627r-","colab_type":"code","colab":{}},"source":["def decoding_layer(dec_embed_input, embeddings, enc_output, enc_state, vocab_size, text_length, summary_length, \n","                   max_summary_length, rnn_size, vocab_to_int, keep_prob, batch_size, num_layers):\n","    '''Create the decoding cell and attention for the training and inference decoding layers'''\n","    \n","    for layer in range(num_layers):\n","        with tf.variable_scope('decoder_{}'.format(layer)):\n","            lstm = tf.contrib.rnn.LSTMCell(rnn_size,\n","                                           initializer=tf.random_uniform_initializer(-0.1, 0.1, seed=2))\n","            dec_cell = tf.contrib.rnn.DropoutWrapper(lstm, \n","                                                     input_keep_prob = keep_prob)\n","    \n","    output_layer = Dense(vocab_size,\n","                         kernel_initializer = tf.truncated_normal_initializer(mean = 0.0, stddev=0.1))\n","    \n","    attn_mech = tf.contrib.seq2seq.BahdanauAttention(rnn_size,\n","                                                  enc_output,\n","                                                  text_length,\n","                                                  normalize=False,\n","                                                  name='BahdanauAttention')\n","\n","    dec_cell = tf.contrib.seq2seq.AttentionWrapper(dec_cell,\n","                                                          attn_mech,\n","                                                          rnn_size)\n","            \n","    initial_state = dec_cell.zero_state(batch_size=batch_size,dtype=tf.float32).clone(cell_state=enc_state[0])\n","    with tf.variable_scope(\"decode\"):\n","        training_logits = training_decoding_layer(dec_embed_input, \n","                                                  summary_length, \n","                                                  dec_cell, \n","                                                  initial_state,\n","                                                  output_layer,\n","                                                  vocab_size, \n","                                                  max_summary_length)\n","    with tf.variable_scope(\"decode\", reuse=True):\n","        inference_logits = inference_decoding_layer(embeddings,  \n","                                                    vocab_to_int['<GO>'], \n","                                                    vocab_to_int['<EOS>'],\n","                                                    dec_cell, \n","                                                    initial_state, \n","                                                    output_layer,\n","                                                    max_summary_length,\n","                                                    batch_size)\n","\n","    return training_logits, inference_logits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"24O_LUJa27vj","colab_type":"code","colab":{}},"source":["def seq2seq_model(input_data, target_data, keep_prob, text_length, summary_length, max_summary_length, \n","                  vocab_size, rnn_size, num_layers, vocab_to_int, batch_size):\n","    '''Use the previous functions to create the training and inference logits'''\n","    \n","    # Use Numberbatch's embeddings and the newly created ones as our embeddings\n","    embeddings = word_embedding_matrix\n","    \n","    enc_embed_input = tf.nn.embedding_lookup(embeddings, input_data)\n","    enc_output, enc_state = encoding_layer(rnn_size, text_length, num_layers, enc_embed_input, keep_prob)\n","    \n","    dec_input = process_encoding_input(target_data, vocab_to_int, batch_size)\n","    dec_embed_input = tf.nn.embedding_lookup(embeddings, dec_input)\n","    \n","    training_logits, inference_logits  = decoding_layer(dec_embed_input, \n","                                                        embeddings,\n","                                                        enc_output,\n","                                                        enc_state, \n","                                                        vocab_size, \n","                                                        text_length, \n","                                                        summary_length, \n","                                                        max_summary_length,\n","                                                        rnn_size, \n","                                                        vocab_to_int, \n","                                                        keep_prob, \n","                                                        batch_size,\n","                                                        num_layers)\n","    \n","    return training_logits, inference_logits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XoRIiqCF27ym","colab_type":"code","colab":{}},"source":["def pad_sentence_batch(sentence_batch):\n","    \"\"\"Pad sentences with <PAD> so that each sentence of a batch has the same length\"\"\"\n","    max_sentence = max([len(sentence) for sentence in sentence_batch])\n","    return [sentence + [vocab_to_int['<PAD>']] * (max_sentence - len(sentence)) for sentence in sentence_batch]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"65ofX__U274R","colab_type":"code","colab":{}},"source":["def get_batches(summaries, texts, batch_size):\n","    \"\"\"Batch summaries, texts, and the lengths of their sentences together\"\"\"\n","    for batch_i in range(0, len(texts)//batch_size):\n","        start_i = batch_i * batch_size\n","        summaries_batch = summaries[start_i:start_i + batch_size]\n","        texts_batch = texts[start_i:start_i + batch_size]\n","        pad_summaries_batch = np.array(pad_sentence_batch(summaries_batch))\n","        pad_texts_batch = np.array(pad_sentence_batch(texts_batch))\n","        \n","        # Need the lengths for the _lengths parameters\n","        pad_summaries_lengths = []\n","        for summary in pad_summaries_batch:\n","            pad_summaries_lengths.append(len(summary))\n","        \n","        pad_texts_lengths = []\n","        for text in pad_texts_batch:\n","            pad_texts_lengths.append(len(text))\n","        \n","        yield pad_summaries_batch, pad_texts_batch, pad_summaries_lengths, pad_texts_lengths"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"chvv3eQW27_R","colab_type":"code","colab":{}},"source":["# Set the Hyperparameters\n","epochs = 100\n","batch_size = 64\n","rnn_size = 256\n","num_layers = 2\n","learning_rate = 0.005\n","keep_probability = 0.75"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xBYr_dB628Ch","colab_type":"code","outputId":"ae2b7eb7-716d-4fbc-b3cd-acd69c4b5fc4","executionInfo":{"status":"ok","timestamp":1584178377222,"user_tz":-330,"elapsed":5590,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":496}},"source":["# Build the graph\n","train_graph = tf.Graph()\n","# Set the graph to default to ensure that it is ready for training\n","with train_graph.as_default():\n","    \n","    # Load the model inputs    \n","    input_data, targets, lr, keep_prob, summary_length, max_summary_length, text_length = model_inputs()\n","\n","    # Create the training and inference logits\n","    training_logits, inference_logits = seq2seq_model(tf.reverse(input_data, [-1]),\n","                                                      targets, \n","                                                      keep_prob,   \n","                                                      text_length,\n","                                                      summary_length,\n","                                                      max_summary_length,\n","                                                      len(vocab_to_int)+1,\n","                                                      rnn_size, \n","                                                      num_layers, \n","                                                      vocab_to_int,\n","                                                      batch_size)\n","    \n","    # Create tensors for the training logits and inference logits\n","    training_logits = tf.identity(training_logits.rnn_output, 'logits')\n","    inference_logits = tf.identity(inference_logits.sample_id, name='predictions')\n","    \n","    # Create the weights for sequence_loss\n","    masks = tf.sequence_mask(summary_length, max_summary_length, dtype=tf.float32, name='masks')\n","\n","    with tf.name_scope(\"optimization\"):\n","        # Loss function\n","        cost = tf.contrib.seq2seq.sequence_loss(\n","            training_logits,\n","            targets,\n","            masks)\n","\n","        # Optimizer\n","        optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","        # Gradient Clipping\n","        gradients = optimizer.compute_gradients(cost)\n","        capped_gradients = [(tf.clip_by_value(grad, -5., 5.), var) for grad, var in gradients if grad is not None]\n","        train_op = optimizer.apply_gradients(capped_gradients)\n","print(\"Graph is built.\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:\n","The TensorFlow contrib module will not be included in TensorFlow 2.0.\n","For more information, please see:\n","  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n","  * https://github.com/tensorflow/addons\n","  * https://github.com/tensorflow/io (for I/O related ops)\n","If you depend on functionality not listed there, please file an issue.\n","\n","WARNING:tensorflow:From <ipython-input-28-9390cb26606a>:7: LSTMCell.__init__ (from tensorflow.python.ops.rnn_cell_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","This class is equivalent as tf.keras.layers.LSTMCell, and will be replaced by that in Tensorflow 2.0.\n","WARNING:tensorflow:From <ipython-input-28-9390cb26606a>:20: bidirectional_dynamic_rnn (from tensorflow.python.ops.rnn) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `keras.layers.Bidirectional(keras.layers.RNN(cell))`, which is equivalent to this API\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/rnn.py:464: dynamic_rnn (from tensorflow.python.ops.rnn) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `keras.layers.RNN(cell)`, which is equivalent to this API\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/rnn_cell_impl.py:958: Layer.add_variable (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `layer.add_weight` method instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/rnn_cell_impl.py:962: calling Zeros.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/rnn.py:244: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","Graph is built.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o5BojCcu28FY","colab_type":"code","outputId":"f0c1d41d-604c-4757-c874-6b5964757d23","executionInfo":{"status":"ok","timestamp":1584180521918,"user_tz":-330,"elapsed":859,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["## Training the Model\n","# Subset the data for training\n","start = 200000\n","end = start+100000\n","sorted_summaries_short = sorted_summaries[start:end]\n","sorted_texts_short = sorted_texts[start:end]\n","print(\"The shortest text length:\", len(sorted_texts_short[0]))\n","print(\"The longest text length:\",len(sorted_texts_short[-1]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["The shortest text length: 25\n","The longest text length: 38\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YPs-OOj428IZ","colab_type":"code","outputId":"d1ed6cad-f6ea-42ed-8b8b-a6d5ce4b34c5","executionInfo":{"status":"ok","timestamp":1584184691763,"user_tz":-330,"elapsed":4168883,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["0"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch   1/100 Batch   20/1562 - Loss:  4.514, Seconds: 2.57\n","Epoch   1/100 Batch   40/1562 - Loss:  2.836, Seconds: 2.26\n","Epoch   1/100 Batch   60/1562 - Loss:  2.799, Seconds: 2.25\n","Epoch   1/100 Batch   80/1562 - Loss:  2.791, Seconds: 2.19\n","Epoch   1/100 Batch  100/1562 - Loss:  2.824, Seconds: 2.23\n","Epoch   1/100 Batch  120/1562 - Loss:  2.764, Seconds: 2.27\n","Epoch   1/100 Batch  140/1562 - Loss:  2.689, Seconds: 2.43\n","Epoch   1/100 Batch  160/1562 - Loss:  2.652, Seconds: 2.11\n","Epoch   1/100 Batch  180/1562 - Loss:  2.526, Seconds: 2.33\n","Epoch   1/100 Batch  200/1562 - Loss:  2.598, Seconds: 2.46\n","Epoch   1/100 Batch  220/1562 - Loss:  2.659, Seconds: 2.62\n","Epoch   1/100 Batch  240/1562 - Loss:  2.650, Seconds: 2.48\n","Epoch   1/100 Batch  260/1562 - Loss:  2.528, Seconds: 2.52\n","Epoch   1/100 Batch  280/1562 - Loss:  2.443, Seconds: 2.51\n","Epoch   1/100 Batch  300/1562 - Loss:  2.338, Seconds: 2.41\n","Epoch   1/100 Batch  320/1562 - Loss:  2.494, Seconds: 2.17\n","Epoch   1/100 Batch  340/1562 - Loss:  2.562, Seconds: 2.29\n","Epoch   1/100 Batch  360/1562 - Loss:  2.607, Seconds: 2.55\n","Epoch   1/100 Batch  380/1562 - Loss:  2.541, Seconds: 2.77\n","Epoch   1/100 Batch  400/1562 - Loss:  2.476, Seconds: 2.36\n","Epoch   1/100 Batch  420/1562 - Loss:  2.276, Seconds: 2.45\n","Epoch   1/100 Batch  440/1562 - Loss:  2.268, Seconds: 2.59\n","Epoch   1/100 Batch  460/1562 - Loss:  2.317, Seconds: 2.36\n","Epoch   1/100 Batch  480/1562 - Loss:  2.541, Seconds: 2.50\n","Epoch   1/100 Batch  500/1562 - Loss:  2.492, Seconds: 2.29\n","Average loss for this update: 2.637\n","New Record!\n","Epoch   1/100 Batch  520/1562 - Loss:  2.347, Seconds: 2.88\n","Epoch   1/100 Batch  540/1562 - Loss:  2.401, Seconds: 2.35\n","Epoch   1/100 Batch  560/1562 - Loss:  2.294, Seconds: 2.30\n","Epoch   1/100 Batch  580/1562 - Loss:  2.246, Seconds: 2.91\n","Epoch   1/100 Batch  600/1562 - Loss:  2.338, Seconds: 3.04\n","Epoch   1/100 Batch  620/1562 - Loss:  2.391, Seconds: 2.37\n","Epoch   1/100 Batch  640/1562 - Loss:  2.612, Seconds: 2.84\n","Epoch   1/100 Batch  660/1562 - Loss:  2.492, Seconds: 2.46\n","Epoch   1/100 Batch  680/1562 - Loss:  2.347, Seconds: 2.38\n","Epoch   1/100 Batch  700/1562 - Loss:  2.301, Seconds: 2.63\n","Epoch   1/100 Batch  720/1562 - Loss:  2.132, Seconds: 2.76\n","Epoch   1/100 Batch  740/1562 - Loss:  2.139, Seconds: 2.69\n","Epoch   1/100 Batch  760/1562 - Loss:  2.466, Seconds: 2.58\n","Epoch   1/100 Batch  780/1562 - Loss:  2.505, Seconds: 2.31\n","Epoch   1/100 Batch  800/1562 - Loss:  2.326, Seconds: 2.44\n","Epoch   1/100 Batch  820/1562 - Loss:  2.129, Seconds: 2.45\n","Epoch   1/100 Batch  840/1562 - Loss:  2.136, Seconds: 2.51\n","Epoch   1/100 Batch  860/1562 - Loss:  2.163, Seconds: 2.72\n","Epoch   1/100 Batch  880/1562 - Loss:  2.382, Seconds: 2.77\n","Epoch   1/100 Batch  900/1562 - Loss:  2.359, Seconds: 2.61\n","Epoch   1/100 Batch  920/1562 - Loss:  2.260, Seconds: 2.60\n","Epoch   1/100 Batch  940/1562 - Loss:  2.333, Seconds: 2.42\n","Epoch   1/100 Batch  960/1562 - Loss:  2.279, Seconds: 2.52\n","Epoch   1/100 Batch  980/1562 - Loss:  1.993, Seconds: 2.87\n","Epoch   1/100 Batch 1000/1562 - Loss:  2.410, Seconds: 2.65\n","Epoch   1/100 Batch 1020/1562 - Loss:  2.292, Seconds: 2.63\n","Average loss for this update: 2.304\n","New Record!\n","Epoch   1/100 Batch 1040/1562 - Loss:  2.187, Seconds: 2.82\n","Epoch   1/100 Batch 1060/1562 - Loss:  2.178, Seconds: 2.73\n","Epoch   1/100 Batch 1080/1562 - Loss:  2.110, Seconds: 2.61\n","Epoch   1/100 Batch 1100/1562 - Loss:  2.174, Seconds: 3.05\n","Epoch   1/100 Batch 1120/1562 - Loss:  2.298, Seconds: 3.69\n","Epoch   1/100 Batch 1140/1562 - Loss:  2.150, Seconds: 2.93\n","Epoch   1/100 Batch 1160/1562 - Loss:  2.049, Seconds: 2.64\n","Epoch   1/100 Batch 1180/1562 - Loss:  2.103, Seconds: 2.78\n","Epoch   1/100 Batch 1200/1562 - Loss:  2.090, Seconds: 2.76\n","Epoch   1/100 Batch 1220/1562 - Loss:  2.365, Seconds: 2.87\n","Epoch   1/100 Batch 1240/1562 - Loss:  2.274, Seconds: 2.70\n","Epoch   1/100 Batch 1260/1562 - Loss:  2.125, Seconds: 2.92\n","Epoch   1/100 Batch 1280/1562 - Loss:  2.057, Seconds: 2.71\n","Epoch   1/100 Batch 1300/1562 - Loss:  2.020, Seconds: 2.73\n","Epoch   1/100 Batch 1320/1562 - Loss:  2.344, Seconds: 2.97\n","Epoch   1/100 Batch 1340/1562 - Loss:  2.255, Seconds: 2.93\n","Epoch   1/100 Batch 1360/1562 - Loss:  2.089, Seconds: 3.30\n","Epoch   1/100 Batch 1380/1562 - Loss:  2.004, Seconds: 2.77\n","Epoch   1/100 Batch 1400/1562 - Loss:  2.015, Seconds: 3.02\n","Epoch   1/100 Batch 1420/1562 - Loss:  2.261, Seconds: 2.95\n","Epoch   1/100 Batch 1440/1562 - Loss:  2.253, Seconds: 2.91\n","Epoch   1/100 Batch 1460/1562 - Loss:  2.103, Seconds: 2.96\n","Epoch   1/100 Batch 1480/1562 - Loss:  2.037, Seconds: 2.87\n","Epoch   1/100 Batch 1500/1562 - Loss:  2.029, Seconds: 2.97\n","Epoch   1/100 Batch 1520/1562 - Loss:  2.267, Seconds: 3.00\n","Epoch   1/100 Batch 1540/1562 - Loss:  2.145, Seconds: 2.81\n","Average loss for this update: 2.151\n","New Record!\n","Epoch   1/100 Batch 1560/1562 - Loss:  2.110, Seconds: 3.12\n","Epoch   2/100 Batch   20/1562 - Loss:  2.247, Seconds: 2.38\n","Epoch   2/100 Batch   40/1562 - Loss:  2.040, Seconds: 2.20\n","Epoch   2/100 Batch   60/1562 - Loss:  2.110, Seconds: 2.86\n","Epoch   2/100 Batch   80/1562 - Loss:  2.091, Seconds: 2.87\n","Epoch   2/100 Batch  100/1562 - Loss:  2.118, Seconds: 2.33\n","Epoch   2/100 Batch  120/1562 - Loss:  2.104, Seconds: 2.30\n","Epoch   2/100 Batch  140/1562 - Loss:  1.982, Seconds: 2.42\n","Epoch   2/100 Batch  160/1562 - Loss:  1.951, Seconds: 2.07\n","Epoch   2/100 Batch  180/1562 - Loss:  1.844, Seconds: 2.43\n","Epoch   2/100 Batch  200/1562 - Loss:  1.990, Seconds: 2.34\n","Epoch   2/100 Batch  220/1562 - Loss:  2.074, Seconds: 2.42\n","Epoch   2/100 Batch  240/1562 - Loss:  2.070, Seconds: 2.64\n","Epoch   2/100 Batch  260/1562 - Loss:  1.929, Seconds: 2.47\n","Epoch   2/100 Batch  280/1562 - Loss:  1.828, Seconds: 2.45\n","Epoch   2/100 Batch  300/1562 - Loss:  1.707, Seconds: 2.34\n","Epoch   2/100 Batch  320/1562 - Loss:  1.878, Seconds: 2.14\n","Epoch   2/100 Batch  340/1562 - Loss:  1.958, Seconds: 2.28\n","Epoch   2/100 Batch  360/1562 - Loss:  2.140, Seconds: 2.58\n","Epoch   2/100 Batch  380/1562 - Loss:  2.031, Seconds: 2.47\n","Epoch   2/100 Batch  400/1562 - Loss:  1.983, Seconds: 2.35\n","Epoch   2/100 Batch  420/1562 - Loss:  1.803, Seconds: 2.48\n","Epoch   2/100 Batch  440/1562 - Loss:  1.757, Seconds: 2.79\n","Epoch   2/100 Batch  460/1562 - Loss:  1.821, Seconds: 2.38\n","Epoch   2/100 Batch  480/1562 - Loss:  2.030, Seconds: 2.68\n","Epoch   2/100 Batch  500/1562 - Loss:  2.058, Seconds: 2.43\n","Average loss for this update: 1.98\n","New Record!\n","Epoch   2/100 Batch  520/1562 - Loss:  1.905, Seconds: 2.84\n","Epoch   2/100 Batch  540/1562 - Loss:  1.961, Seconds: 2.28\n","Epoch   2/100 Batch  560/1562 - Loss:  1.812, Seconds: 2.32\n","Epoch   2/100 Batch  580/1562 - Loss:  1.823, Seconds: 2.41\n","Epoch   2/100 Batch  600/1562 - Loss:  1.871, Seconds: 2.22\n","Epoch   2/100 Batch  620/1562 - Loss:  1.967, Seconds: 3.48\n","Epoch   2/100 Batch  640/1562 - Loss:  2.195, Seconds: 2.57\n","Epoch   2/100 Batch  660/1562 - Loss:  2.051, Seconds: 2.43\n","Epoch   2/100 Batch  680/1562 - Loss:  1.948, Seconds: 2.39\n","Epoch   2/100 Batch  700/1562 - Loss:  1.847, Seconds: 2.56\n","Epoch   2/100 Batch  720/1562 - Loss:  1.750, Seconds: 2.87\n","Epoch   2/100 Batch  740/1562 - Loss:  1.754, Seconds: 2.65\n","Epoch   2/100 Batch  760/1562 - Loss:  2.098, Seconds: 2.49\n","Epoch   2/100 Batch  780/1562 - Loss:  2.124, Seconds: 2.39\n","Epoch   2/100 Batch  800/1562 - Loss:  1.957, Seconds: 2.34\n","Epoch   2/100 Batch  820/1562 - Loss:  1.773, Seconds: 2.35\n","Epoch   2/100 Batch  840/1562 - Loss:  1.804, Seconds: 2.48\n","Epoch   2/100 Batch  860/1562 - Loss:  1.810, Seconds: 2.69\n","Epoch   2/100 Batch  880/1562 - Loss:  2.049, Seconds: 2.48\n","Epoch   2/100 Batch  900/1562 - Loss:  2.020, Seconds: 2.69\n","Epoch   2/100 Batch  920/1562 - Loss:  1.916, Seconds: 2.51\n","Epoch   2/100 Batch  940/1562 - Loss:  1.952, Seconds: 2.34\n","Epoch   2/100 Batch  960/1562 - Loss:  1.922, Seconds: 2.47\n","Epoch   2/100 Batch  980/1562 - Loss:  1.669, Seconds: 2.72\n","Epoch   2/100 Batch 1000/1562 - Loss:  2.089, Seconds: 2.65\n","Epoch   2/100 Batch 1020/1562 - Loss:  1.930, Seconds: 2.68\n","Average loss for this update: 1.921\n","New Record!\n","Epoch   2/100 Batch 1040/1562 - Loss:  1.851, Seconds: 2.66\n","Epoch   2/100 Batch 1060/1562 - Loss:  1.807, Seconds: 2.67\n","Epoch   2/100 Batch 1080/1562 - Loss:  1.774, Seconds: 2.77\n","Epoch   2/100 Batch 1100/1562 - Loss:  1.848, Seconds: 3.10\n","Epoch   2/100 Batch 1120/1562 - Loss:  2.006, Seconds: 3.82\n","Epoch   2/100 Batch 1140/1562 - Loss:  1.837, Seconds: 2.88\n","Epoch   2/100 Batch 1160/1562 - Loss:  1.723, Seconds: 2.73\n","Epoch   2/100 Batch 1180/1562 - Loss:  1.808, Seconds: 2.64\n","Epoch   2/100 Batch 1200/1562 - Loss:  1.787, Seconds: 2.60\n","Epoch   2/100 Batch 1220/1562 - Loss:  2.048, Seconds: 3.17\n","Epoch   2/100 Batch 1240/1562 - Loss:  1.942, Seconds: 3.06\n","Epoch   2/100 Batch 1260/1562 - Loss:  1.821, Seconds: 3.03\n","Epoch   2/100 Batch 1280/1562 - Loss:  1.777, Seconds: 2.70\n","Epoch   2/100 Batch 1300/1562 - Loss:  1.743, Seconds: 2.74\n","Epoch   2/100 Batch 1320/1562 - Loss:  2.043, Seconds: 2.96\n","Epoch   2/100 Batch 1340/1562 - Loss:  1.959, Seconds: 2.98\n","Epoch   2/100 Batch 1360/1562 - Loss:  1.804, Seconds: 3.14\n","Epoch   2/100 Batch 1380/1562 - Loss:  1.703, Seconds: 2.72\n","Epoch   2/100 Batch 1400/1562 - Loss:  1.729, Seconds: 3.06\n","Epoch   2/100 Batch 1420/1562 - Loss:  1.980, Seconds: 3.05\n","Epoch   2/100 Batch 1440/1562 - Loss:  1.945, Seconds: 3.08\n","Epoch   2/100 Batch 1460/1562 - Loss:  1.801, Seconds: 2.88\n","Epoch   2/100 Batch 1480/1562 - Loss:  1.753, Seconds: 2.91\n","Epoch   2/100 Batch 1500/1562 - Loss:  1.738, Seconds: 2.86\n","Epoch   2/100 Batch 1520/1562 - Loss:  1.996, Seconds: 3.10\n","Epoch   2/100 Batch 1540/1562 - Loss:  1.858, Seconds: 3.20\n","Average loss for this update: 1.849\n","New Record!\n","Epoch   2/100 Batch 1560/1562 - Loss:  1.829, Seconds: 3.02\n","Epoch   3/100 Batch   20/1562 - Loss:  2.056, Seconds: 2.45\n","Epoch   3/100 Batch   40/1562 - Loss:  1.829, Seconds: 2.14\n","Epoch   3/100 Batch   60/1562 - Loss:  1.872, Seconds: 2.41\n","Epoch   3/100 Batch   80/1562 - Loss:  1.852, Seconds: 2.84\n","Epoch   3/100 Batch  100/1562 - Loss:  1.863, Seconds: 2.26\n","Epoch   3/100 Batch  120/1562 - Loss:  1.850, Seconds: 2.28\n","Epoch   3/100 Batch  140/1562 - Loss:  1.700, Seconds: 2.47\n","Epoch   3/100 Batch  160/1562 - Loss:  1.699, Seconds: 2.16\n","Epoch   3/100 Batch  180/1562 - Loss:  1.610, Seconds: 2.22\n","Epoch   3/100 Batch  200/1562 - Loss:  1.776, Seconds: 2.53\n","Epoch   3/100 Batch  220/1562 - Loss:  1.834, Seconds: 2.46\n","Epoch   3/100 Batch  240/1562 - Loss:  1.823, Seconds: 2.44\n","Epoch   3/100 Batch  260/1562 - Loss:  1.698, Seconds: 2.59\n","Epoch   3/100 Batch  280/1562 - Loss:  1.600, Seconds: 2.64\n","Epoch   3/100 Batch  300/1562 - Loss:  1.477, Seconds: 2.29\n","Epoch   3/100 Batch  320/1562 - Loss:  1.665, Seconds: 2.16\n","Epoch   3/100 Batch  340/1562 - Loss:  1.729, Seconds: 2.32\n","Epoch   3/100 Batch  360/1562 - Loss:  1.926, Seconds: 2.55\n","Epoch   3/100 Batch  380/1562 - Loss:  1.789, Seconds: 2.74\n","Epoch   3/100 Batch  400/1562 - Loss:  1.749, Seconds: 2.28\n","Epoch   3/100 Batch  420/1562 - Loss:  1.593, Seconds: 2.47\n","Epoch   3/100 Batch  440/1562 - Loss:  1.543, Seconds: 2.61\n","Epoch   3/100 Batch  460/1562 - Loss:  1.609, Seconds: 2.34\n","Epoch   3/100 Batch  480/1562 - Loss:  1.788, Seconds: 2.82\n","Epoch   3/100 Batch  500/1562 - Loss:  1.849, Seconds: 2.36\n","Average loss for this update: 1.749\n","New Record!\n","Epoch   3/100 Batch  520/1562 - Loss:  1.686, Seconds: 2.85\n","Epoch   3/100 Batch  540/1562 - Loss:  1.743, Seconds: 2.32\n","Epoch   3/100 Batch  560/1562 - Loss:  1.592, Seconds: 2.20\n","Epoch   3/100 Batch  580/1562 - Loss:  1.608, Seconds: 2.38\n","Epoch   3/100 Batch  600/1562 - Loss:  1.667, Seconds: 4.17\n","Epoch   3/100 Batch  620/1562 - Loss:  1.737, Seconds: 2.39\n","Epoch   3/100 Batch  640/1562 - Loss:  1.970, Seconds: 2.72\n","Epoch   3/100 Batch  660/1562 - Loss:  1.813, Seconds: 2.58\n","Epoch   3/100 Batch  680/1562 - Loss:  1.737, Seconds: 2.39\n","Epoch   3/100 Batch  700/1562 - Loss:  1.618, Seconds: 2.68\n","Epoch   3/100 Batch  720/1562 - Loss:  1.550, Seconds: 2.63\n","Epoch   3/100 Batch  740/1562 - Loss:  1.557, Seconds: 2.79\n","Epoch   3/100 Batch  760/1562 - Loss:  1.898, Seconds: 2.47\n","Epoch   3/100 Batch  780/1562 - Loss:  1.913, Seconds: 2.57\n","Epoch   3/100 Batch  800/1562 - Loss:  1.759, Seconds: 2.39\n","Epoch   3/100 Batch  820/1562 - Loss:  1.588, Seconds: 2.50\n","Epoch   3/100 Batch  840/1562 - Loss:  1.638, Seconds: 2.48\n","Epoch   3/100 Batch  860/1562 - Loss:  1.624, Seconds: 2.69\n","Epoch   3/100 Batch  880/1562 - Loss:  1.862, Seconds: 2.53\n","Epoch   3/100 Batch  900/1562 - Loss:  1.831, Seconds: 2.75\n","Epoch   3/100 Batch  920/1562 - Loss:  1.725, Seconds: 2.70\n","Epoch   3/100 Batch  940/1562 - Loss:  1.754, Seconds: 2.41\n","Epoch   3/100 Batch  960/1562 - Loss:  1.740, Seconds: 2.55\n","Epoch   3/100 Batch  980/1562 - Loss:  1.500, Seconds: 2.79\n","Epoch   3/100 Batch 1000/1562 - Loss:  1.895, Seconds: 2.80\n","Epoch   3/100 Batch 1020/1562 - Loss:  1.720, Seconds: 2.69\n","Average loss for this update: 1.719\n","New Record!\n","Epoch   3/100 Batch 1040/1562 - Loss:  1.666, Seconds: 3.09\n","Epoch   3/100 Batch 1060/1562 - Loss:  1.623, Seconds: 2.70\n","Epoch   3/100 Batch 1080/1562 - Loss:  1.583, Seconds: 2.64\n","Epoch   3/100 Batch 1100/1562 - Loss:  1.666, Seconds: 3.54\n","Epoch   3/100 Batch 1120/1562 - Loss:  1.841, Seconds: 3.41\n","Epoch   3/100 Batch 1140/1562 - Loss:  1.666, Seconds: 2.76\n","Epoch   3/100 Batch 1160/1562 - Loss:  1.553, Seconds: 2.71\n","Epoch   3/100 Batch 1180/1562 - Loss:  1.641, Seconds: 2.82\n","Epoch   3/100 Batch 1200/1562 - Loss:  1.621, Seconds: 2.79\n","Epoch   3/100 Batch 1220/1562 - Loss:  1.866, Seconds: 2.83\n","Epoch   3/100 Batch 1240/1562 - Loss:  1.760, Seconds: 2.95\n","Epoch   3/100 Batch 1260/1562 - Loss:  1.639, Seconds: 2.79\n","Epoch   3/100 Batch 1280/1562 - Loss:  1.605, Seconds: 2.66\n","Epoch   3/100 Batch 1300/1562 - Loss:  1.588, Seconds: 2.74\n","Epoch   3/100 Batch 1320/1562 - Loss:  1.855, Seconds: 3.05\n","Epoch   3/100 Batch 1340/1562 - Loss:  1.783, Seconds: 3.06\n","Epoch   3/100 Batch 1360/1562 - Loss:  1.641, Seconds: 3.28\n","Epoch   3/100 Batch 1380/1562 - Loss:  1.539, Seconds: 2.84\n","Epoch   3/100 Batch 1400/1562 - Loss:  1.573, Seconds: 3.01\n","Epoch   3/100 Batch 1420/1562 - Loss:  1.780, Seconds: 2.89\n","Epoch   3/100 Batch 1440/1562 - Loss:  1.756, Seconds: 2.97\n","Epoch   3/100 Batch 1460/1562 - Loss:  1.631, Seconds: 2.99\n","Epoch   3/100 Batch 1480/1562 - Loss:  1.582, Seconds: 2.98\n","Epoch   3/100 Batch 1500/1562 - Loss:  1.586, Seconds: 2.81\n","Epoch   3/100 Batch 1520/1562 - Loss:  1.848, Seconds: 3.09\n","Epoch   3/100 Batch 1540/1562 - Loss:  1.690, Seconds: 2.89\n","Average loss for this update: 1.677\n","New Record!\n","Epoch   3/100 Batch 1560/1562 - Loss:  1.658, Seconds: 2.93\n","Epoch   4/100 Batch   20/1562 - Loss:  1.915, Seconds: 2.40\n","Epoch   4/100 Batch   40/1562 - Loss:  1.676, Seconds: 2.17\n","Epoch   4/100 Batch   60/1562 - Loss:  1.729, Seconds: 2.40\n","Epoch   4/100 Batch   80/1562 - Loss:  1.698, Seconds: 2.87\n","Epoch   4/100 Batch  100/1562 - Loss:  1.708, Seconds: 2.15\n","Epoch   4/100 Batch  120/1562 - Loss:  1.691, Seconds: 2.34\n","Epoch   4/100 Batch  140/1562 - Loss:  1.541, Seconds: 2.49\n","Epoch   4/100 Batch  160/1562 - Loss:  1.569, Seconds: 2.14\n","Epoch   4/100 Batch  180/1562 - Loss:  1.472, Seconds: 2.35\n","Epoch   4/100 Batch  200/1562 - Loss:  1.629, Seconds: 2.45\n","Epoch   4/100 Batch  220/1562 - Loss:  1.679, Seconds: 2.44\n","Epoch   4/100 Batch  240/1562 - Loss:  1.659, Seconds: 2.45\n","Epoch   4/100 Batch  260/1562 - Loss:  1.554, Seconds: 2.53\n","Epoch   4/100 Batch  280/1562 - Loss:  1.443, Seconds: 2.41\n","Epoch   4/100 Batch  300/1562 - Loss:  1.346, Seconds: 2.36\n","Epoch   4/100 Batch  320/1562 - Loss:  1.534, Seconds: 2.17\n","Epoch   4/100 Batch  340/1562 - Loss:  1.568, Seconds: 2.51\n","Epoch   4/100 Batch  360/1562 - Loss:  1.770, Seconds: 2.62\n","Epoch   4/100 Batch  380/1562 - Loss:  1.649, Seconds: 2.44\n","Epoch   4/100 Batch  400/1562 - Loss:  1.591, Seconds: 2.27\n","Epoch   4/100 Batch  420/1562 - Loss:  1.456, Seconds: 2.47\n","Epoch   4/100 Batch  440/1562 - Loss:  1.411, Seconds: 2.59\n","Epoch   4/100 Batch  460/1562 - Loss:  1.463, Seconds: 2.48\n","Epoch   4/100 Batch  480/1562 - Loss:  1.621, Seconds: 2.61\n","Epoch   4/100 Batch  500/1562 - Loss:  1.699, Seconds: 2.32\n","Average loss for this update: 1.601\n","New Record!\n","Epoch   4/100 Batch  520/1562 - Loss:  1.542, Seconds: 3.02\n","Epoch   4/100 Batch  540/1562 - Loss:  1.603, Seconds: 2.43\n","Epoch   4/100 Batch  560/1562 - Loss:  1.445, Seconds: 2.28\n","Epoch   4/100 Batch  580/1562 - Loss:  1.459, Seconds: 2.38\n","Epoch   4/100 Batch  600/1562 - Loss:  1.520, Seconds: 4.39\n","Epoch   4/100 Batch  620/1562 - Loss:  1.584, Seconds: 2.28\n","Epoch   4/100 Batch  640/1562 - Loss:  1.805, Seconds: 2.58\n","Epoch   4/100 Batch  660/1562 - Loss:  1.655, Seconds: 2.57\n","Epoch   4/100 Batch  680/1562 - Loss:  1.598, Seconds: 2.42\n","Epoch   4/100 Batch  700/1562 - Loss:  1.478, Seconds: 2.55\n","Epoch   4/100 Batch  720/1562 - Loss:  1.421, Seconds: 2.58\n","Epoch   4/100 Batch  740/1562 - Loss:  1.436, Seconds: 2.68\n","Epoch   4/100 Batch  760/1562 - Loss:  1.755, Seconds: 2.66\n","Epoch   4/100 Batch  780/1562 - Loss:  1.748, Seconds: 2.22\n","Epoch   4/100 Batch  800/1562 - Loss:  1.622, Seconds: 2.71\n","Epoch   4/100 Batch  820/1562 - Loss:  1.453, Seconds: 2.55\n","Epoch   4/100 Batch  840/1562 - Loss:  1.508, Seconds: 2.48\n","Epoch   4/100 Batch  860/1562 - Loss:  1.521, Seconds: 2.80\n","Epoch   4/100 Batch  880/1562 - Loss:  1.722, Seconds: 2.51\n","Epoch   4/100 Batch  900/1562 - Loss:  1.710, Seconds: 2.75\n","Epoch   4/100 Batch  920/1562 - Loss:  1.599, Seconds: 2.79\n","Epoch   4/100 Batch  940/1562 - Loss:  1.623, Seconds: 2.51\n","Epoch   4/100 Batch  960/1562 - Loss:  1.605, Seconds: 2.52\n","Epoch   4/100 Batch  980/1562 - Loss:  1.400, Seconds: 3.03\n","Epoch   4/100 Batch 1000/1562 - Loss:  1.754, Seconds: 2.79\n","Epoch   4/100 Batch 1020/1562 - Loss:  1.593, Seconds: 2.73\n","Average loss for this update: 1.583\n","New Record!\n","Epoch   4/100 Batch 1040/1562 - Loss:  1.554, Seconds: 3.26\n","Epoch   4/100 Batch 1060/1562 - Loss:  1.511, Seconds: 2.80\n","Epoch   4/100 Batch 1080/1562 - Loss:  1.470, Seconds: 2.76\n","Epoch   4/100 Batch 1100/1562 - Loss:  1.559, Seconds: 3.81\n","Epoch   4/100 Batch 1120/1562 - Loss:  1.708, Seconds: 3.69\n","Epoch   4/100 Batch 1140/1562 - Loss:  1.558, Seconds: 3.05\n","Epoch   4/100 Batch 1160/1562 - Loss:  1.439, Seconds: 2.88\n","Epoch   4/100 Batch 1180/1562 - Loss:  1.522, Seconds: 2.68\n","Epoch   4/100 Batch 1200/1562 - Loss:  1.494, Seconds: 2.72\n","Epoch   4/100 Batch 1220/1562 - Loss:  1.730, Seconds: 3.02\n","Epoch   4/100 Batch 1240/1562 - Loss:  1.633, Seconds: 3.00\n","Epoch   4/100 Batch 1260/1562 - Loss:  1.531, Seconds: 3.14\n","Epoch   4/100 Batch 1280/1562 - Loss:  1.497, Seconds: 2.67\n","Epoch   4/100 Batch 1300/1562 - Loss:  1.474, Seconds: 2.61\n","Epoch   4/100 Batch 1320/1562 - Loss:  1.721, Seconds: 3.03\n","Epoch   4/100 Batch 1340/1562 - Loss:  1.659, Seconds: 3.09\n","Epoch   4/100 Batch 1360/1562 - Loss:  1.526, Seconds: 3.19\n","Epoch   4/100 Batch 1380/1562 - Loss:  1.432, Seconds: 2.81\n","Epoch   4/100 Batch 1400/1562 - Loss:  1.533, Seconds: 3.11\n","Epoch   4/100 Batch 1420/1562 - Loss:  1.711, Seconds: 3.07\n","Epoch   4/100 Batch 1440/1562 - Loss:  1.682, Seconds: 3.09\n","Epoch   4/100 Batch 1460/1562 - Loss:  1.563, Seconds: 2.93\n","Epoch   4/100 Batch 1480/1562 - Loss:  1.503, Seconds: 2.94\n","Epoch   4/100 Batch 1500/1562 - Loss:  1.505, Seconds: 2.95\n","Epoch   4/100 Batch 1520/1562 - Loss:  1.755, Seconds: 3.16\n","Epoch   4/100 Batch 1540/1562 - Loss:  1.605, Seconds: 2.98\n","Average loss for this update: 1.574\n","New Record!\n","Epoch   4/100 Batch 1560/1562 - Loss:  1.573, Seconds: 3.15\n","Epoch   5/100 Batch   20/1562 - Loss:  1.825, Seconds: 2.46\n","Epoch   5/100 Batch   40/1562 - Loss:  1.605, Seconds: 2.40\n","Epoch   5/100 Batch   60/1562 - Loss:  1.636, Seconds: 2.90\n","Epoch   5/100 Batch   80/1562 - Loss:  1.603, Seconds: 2.83\n","Epoch   5/100 Batch  100/1562 - Loss:  1.605, Seconds: 2.21\n","Epoch   5/100 Batch  120/1562 - Loss:  1.595, Seconds: 2.40\n","Epoch   5/100 Batch  140/1562 - Loss:  1.440, Seconds: 2.57\n","Epoch   5/100 Batch  160/1562 - Loss:  1.475, Seconds: 2.15\n","Epoch   5/100 Batch  180/1562 - Loss:  1.395, Seconds: 2.40\n","Epoch   5/100 Batch  200/1562 - Loss:  1.537, Seconds: 2.51\n","Epoch   5/100 Batch  220/1562 - Loss:  1.576, Seconds: 2.48\n","Epoch   5/100 Batch  240/1562 - Loss:  1.569, Seconds: 2.47\n","Epoch   5/100 Batch  260/1562 - Loss:  1.461, Seconds: 2.58\n","Epoch   5/100 Batch  280/1562 - Loss:  1.362, Seconds: 2.60\n","Epoch   5/100 Batch  300/1562 - Loss:  1.275, Seconds: 2.65\n","Epoch   5/100 Batch  320/1562 - Loss:  1.449, Seconds: 2.25\n","Epoch   5/100 Batch  340/1562 - Loss:  1.472, Seconds: 2.39\n","Epoch   5/100 Batch  360/1562 - Loss:  1.664, Seconds: 2.58\n","Epoch   5/100 Batch  380/1562 - Loss:  1.561, Seconds: 2.55\n","Epoch   5/100 Batch  400/1562 - Loss:  1.497, Seconds: 2.40\n","Epoch   5/100 Batch  420/1562 - Loss:  1.373, Seconds: 2.58\n","Epoch   5/100 Batch  440/1562 - Loss:  1.334, Seconds: 2.61\n","Epoch   5/100 Batch  460/1562 - Loss:  1.382, Seconds: 2.55\n","Epoch   5/100 Batch  480/1562 - Loss:  1.511, Seconds: 2.87\n","Epoch   5/100 Batch  500/1562 - Loss:  1.572, Seconds: 2.34\n","Average loss for this update: 1.509\n","New Record!\n","Epoch   5/100 Batch  520/1562 - Loss:  1.431, Seconds: 2.79\n","Epoch   5/100 Batch  540/1562 - Loss:  1.517, Seconds: 2.50\n","Epoch   5/100 Batch  560/1562 - Loss:  1.365, Seconds: 2.34\n","Epoch   5/100 Batch  580/1562 - Loss:  1.373, Seconds: 2.44\n","Epoch   5/100 Batch  600/1562 - Loss:  1.429, Seconds: 2.30\n","Epoch   5/100 Batch  620/1562 - Loss:  1.469, Seconds: 2.84\n","Epoch   5/100 Batch  640/1562 - Loss:  1.678, Seconds: 2.77\n","Epoch   5/100 Batch  660/1562 - Loss:  1.546, Seconds: 2.53\n","Epoch   5/100 Batch  680/1562 - Loss:  1.482, Seconds: 2.72\n","Epoch   5/100 Batch  700/1562 - Loss:  1.369, Seconds: 2.63\n","Epoch   5/100 Batch  720/1562 - Loss:  1.334, Seconds: 2.70\n","Epoch   5/100 Batch  740/1562 - Loss:  1.348, Seconds: 2.76\n","Epoch   5/100 Batch  760/1562 - Loss:  1.643, Seconds: 2.56\n","Epoch   5/100 Batch  780/1562 - Loss:  1.629, Seconds: 2.26\n","Epoch   5/100 Batch  800/1562 - Loss:  1.506, Seconds: 2.41\n","Epoch   5/100 Batch  820/1562 - Loss:  1.349, Seconds: 2.31\n","Epoch   5/100 Batch  840/1562 - Loss:  1.414, Seconds: 2.42\n","Epoch   5/100 Batch  860/1562 - Loss:  1.405, Seconds: 2.79\n","Epoch   5/100 Batch  880/1562 - Loss:  1.606, Seconds: 2.55\n","Epoch   5/100 Batch  900/1562 - Loss:  1.584, Seconds: 2.82\n","Epoch   5/100 Batch  920/1562 - Loss:  1.491, Seconds: 2.81\n","Epoch   5/100 Batch  940/1562 - Loss:  1.509, Seconds: 2.50\n","Epoch   5/100 Batch  960/1562 - Loss:  1.500, Seconds: 2.48\n","Epoch   5/100 Batch  980/1562 - Loss:  1.308, Seconds: 2.70\n","Epoch   5/100 Batch 1000/1562 - Loss:  1.625, Seconds: 3.00\n","Epoch   5/100 Batch 1020/1562 - Loss:  1.466, Seconds: 2.66\n","Average loss for this update: 1.476\n","New Record!\n","Epoch   5/100 Batch 1040/1562 - Loss:  1.452, Seconds: 2.95\n","Epoch   5/100 Batch 1060/1562 - Loss:  1.393, Seconds: 2.83\n","Epoch   5/100 Batch 1080/1562 - Loss:  1.356, Seconds: 2.76\n","Epoch   5/100 Batch 1100/1562 - Loss:  1.445, Seconds: 2.88\n","Epoch   5/100 Batch 1120/1562 - Loss:  1.605, Seconds: 3.61\n","Epoch   5/100 Batch 1140/1562 - Loss:  1.451, Seconds: 2.80\n","Epoch   5/100 Batch 1160/1562 - Loss:  1.332, Seconds: 2.61\n","Epoch   5/100 Batch 1180/1562 - Loss:  1.418, Seconds: 2.68\n","Epoch   5/100 Batch 1200/1562 - Loss:  1.405, Seconds: 2.82\n","Epoch   5/100 Batch 1220/1562 - Loss:  1.612, Seconds: 3.01\n","Epoch   5/100 Batch 1240/1562 - Loss:  1.530, Seconds: 2.90\n","Epoch   5/100 Batch 1260/1562 - Loss:  1.430, Seconds: 3.14\n","Epoch   5/100 Batch 1280/1562 - Loss:  1.403, Seconds: 2.80\n","Epoch   5/100 Batch 1300/1562 - Loss:  1.376, Seconds: 2.73\n","Epoch   5/100 Batch 1320/1562 - Loss:  1.597, Seconds: 3.15\n","Epoch   5/100 Batch 1340/1562 - Loss:  1.543, Seconds: 2.96\n","Epoch   5/100 Batch 1360/1562 - Loss:  1.441, Seconds: 2.96\n","Epoch   5/100 Batch 1380/1562 - Loss:  1.341, Seconds: 2.90\n","Epoch   5/100 Batch 1400/1562 - Loss:  1.394, Seconds: 3.04\n","Epoch   5/100 Batch 1420/1562 - Loss:  1.545, Seconds: 3.00\n","Epoch   5/100 Batch 1440/1562 - Loss:  1.543, Seconds: 3.02\n","Epoch   5/100 Batch 1460/1562 - Loss:  1.444, Seconds: 3.07\n","Epoch   5/100 Batch 1480/1562 - Loss:  1.403, Seconds: 3.10\n","Epoch   5/100 Batch 1500/1562 - Loss:  1.392, Seconds: 2.98\n","Epoch   5/100 Batch 1520/1562 - Loss:  1.632, Seconds: 3.29\n","Epoch   5/100 Batch 1540/1562 - Loss:  1.483, Seconds: 2.99\n","Average loss for this update: 1.461\n","New Record!\n","Epoch   5/100 Batch 1560/1562 - Loss:  1.448, Seconds: 3.56\n","Epoch   6/100 Batch   20/1562 - Loss:  1.706, Seconds: 2.53\n","Epoch   6/100 Batch   40/1562 - Loss:  1.505, Seconds: 2.18\n","Epoch   6/100 Batch   60/1562 - Loss:  1.523, Seconds: 2.45\n","Epoch   6/100 Batch   80/1562 - Loss:  1.496, Seconds: 3.58\n","Epoch   6/100 Batch  100/1562 - Loss:  1.486, Seconds: 2.15\n","Epoch   6/100 Batch  120/1562 - Loss:  1.482, Seconds: 2.41\n","Epoch   6/100 Batch  140/1562 - Loss:  1.349, Seconds: 2.62\n","Epoch   6/100 Batch  160/1562 - Loss:  1.368, Seconds: 2.19\n","Epoch   6/100 Batch  180/1562 - Loss:  1.311, Seconds: 2.65\n","Epoch   6/100 Batch  200/1562 - Loss:  1.434, Seconds: 2.55\n","Epoch   6/100 Batch  220/1562 - Loss:  1.474, Seconds: 2.55\n","Epoch   6/100 Batch  240/1562 - Loss:  1.455, Seconds: 2.52\n","Epoch   6/100 Batch  260/1562 - Loss:  1.347, Seconds: 2.50\n","Epoch   6/100 Batch  280/1562 - Loss:  1.266, Seconds: 2.67\n","Epoch   6/100 Batch  300/1562 - Loss:  1.183, Seconds: 2.41\n","Epoch   6/100 Batch  320/1562 - Loss:  1.355, Seconds: 2.18\n","Epoch   6/100 Batch  340/1562 - Loss:  1.367, Seconds: 2.37\n","Epoch   6/100 Batch  360/1562 - Loss:  1.542, Seconds: 2.73\n","Epoch   6/100 Batch  380/1562 - Loss:  1.450, Seconds: 2.63\n","Epoch   6/100 Batch  400/1562 - Loss:  1.380, Seconds: 2.49\n","Epoch   6/100 Batch  420/1562 - Loss:  1.284, Seconds: 2.61\n","Epoch   6/100 Batch  440/1562 - Loss:  1.248, Seconds: 2.63\n","Epoch   6/100 Batch  460/1562 - Loss:  1.297, Seconds: 2.52\n","Epoch   6/100 Batch  480/1562 - Loss:  1.397, Seconds: 2.60\n","Epoch   6/100 Batch  500/1562 - Loss:  1.485, Seconds: 2.37\n","Average loss for this update: 1.406\n","New Record!\n","Epoch   6/100 Batch  520/1562 - Loss:  1.336, Seconds: 2.77\n","Epoch   6/100 Batch  540/1562 - Loss:  1.417, Seconds: 2.34\n","Epoch   6/100 Batch  560/1562 - Loss:  1.262, Seconds: 2.24\n","Epoch   6/100 Batch  580/1562 - Loss:  1.275, Seconds: 2.40\n","Epoch   6/100 Batch  600/1562 - Loss:  1.334, Seconds: 2.88\n","Epoch   6/100 Batch  620/1562 - Loss:  1.378, Seconds: 3.05\n","Epoch   6/100 Batch  640/1562 - Loss:  1.564, Seconds: 2.56\n","Epoch   6/100 Batch  660/1562 - Loss:  1.446, Seconds: 2.58\n","Epoch   6/100 Batch  680/1562 - Loss:  1.402, Seconds: 2.30\n","Epoch   6/100 Batch  700/1562 - Loss:  1.261, Seconds: 2.65\n","Epoch   6/100 Batch  720/1562 - Loss:  1.256, Seconds: 2.72\n","Epoch   6/100 Batch  740/1562 - Loss:  1.269, Seconds: 2.73\n","Epoch   6/100 Batch  760/1562 - Loss:  1.548, Seconds: 2.60\n","Epoch   6/100 Batch  780/1562 - Loss:  1.549, Seconds: 2.22\n","Epoch   6/100 Batch  800/1562 - Loss:  1.420, Seconds: 2.40\n","Epoch   6/100 Batch  820/1562 - Loss:  1.263, Seconds: 2.57\n","Epoch   6/100 Batch  840/1562 - Loss:  1.353, Seconds: 2.43\n","Epoch   6/100 Batch  860/1562 - Loss:  1.322, Seconds: 2.76\n","Epoch   6/100 Batch  880/1562 - Loss:  1.518, Seconds: 2.62\n","Epoch   6/100 Batch  900/1562 - Loss:  1.505, Seconds: 2.77\n","Epoch   6/100 Batch  920/1562 - Loss:  1.410, Seconds: 2.74\n","Epoch   6/100 Batch  940/1562 - Loss:  1.420, Seconds: 2.51\n","Epoch   6/100 Batch  960/1562 - Loss:  1.411, Seconds: 2.77\n","Epoch   6/100 Batch  980/1562 - Loss:  1.241, Seconds: 2.75\n","Epoch   6/100 Batch 1000/1562 - Loss:  1.540, Seconds: 2.71\n","Epoch   6/100 Batch 1020/1562 - Loss:  1.393, Seconds: 2.69\n","Average loss for this update: 1.389\n","New Record!\n","Epoch   6/100 Batch 1040/1562 - Loss:  1.377, Seconds: 2.81\n","Epoch   6/100 Batch 1060/1562 - Loss:  1.306, Seconds: 3.00\n","Epoch   6/100 Batch 1080/1562 - Loss:  1.282, Seconds: 2.68\n","Epoch   6/100 Batch 1100/1562 - Loss:  1.370, Seconds: 3.63\n","Epoch   6/100 Batch 1120/1562 - Loss:  1.520, Seconds: 3.72\n","Epoch   6/100 Batch 1140/1562 - Loss:  1.379, Seconds: 2.81\n","Epoch   6/100 Batch 1160/1562 - Loss:  1.266, Seconds: 2.69\n","Epoch   6/100 Batch 1180/1562 - Loss:  1.360, Seconds: 2.77\n","Epoch   6/100 Batch 1200/1562 - Loss:  1.330, Seconds: 2.76\n","Epoch   6/100 Batch 1220/1562 - Loss:  1.528, Seconds: 2.82\n","Epoch   6/100 Batch 1240/1562 - Loss:  1.447, Seconds: 2.95\n","Epoch   6/100 Batch 1260/1562 - Loss:  1.363, Seconds: 2.97\n","Epoch   6/100 Batch 1280/1562 - Loss:  1.336, Seconds: 2.61\n","Epoch   6/100 Batch 1300/1562 - Loss:  1.301, Seconds: 2.62\n","Epoch   6/100 Batch 1320/1562 - Loss:  1.517, Seconds: 2.94\n","Epoch   6/100 Batch 1340/1562 - Loss:  1.476, Seconds: 3.16\n","Epoch   6/100 Batch 1360/1562 - Loss:  1.365, Seconds: 3.00\n","Epoch   6/100 Batch 1380/1562 - Loss:  1.286, Seconds: 2.63\n","Epoch   6/100 Batch 1400/1562 - Loss:  1.318, Seconds: 3.13\n","Epoch   6/100 Batch 1420/1562 - Loss:  1.469, Seconds: 2.98\n","Epoch   6/100 Batch 1440/1562 - Loss:  1.460, Seconds: 2.96\n","Epoch   6/100 Batch 1460/1562 - Loss:  1.377, Seconds: 3.01\n","Epoch   6/100 Batch 1480/1562 - Loss:  1.329, Seconds: 2.90\n","Epoch   6/100 Batch 1500/1562 - Loss:  1.325, Seconds: 2.82\n","Epoch   6/100 Batch 1520/1562 - Loss:  1.559, Seconds: 3.04\n","Epoch   6/100 Batch 1540/1562 - Loss:  1.410, Seconds: 2.99\n","Average loss for this update: 1.387\n","New Record!\n","Epoch   6/100 Batch 1560/1562 - Loss:  1.371, Seconds: 2.97\n","Epoch   7/100 Batch   20/1562 - Loss:  1.627, Seconds: 2.58\n","Epoch   7/100 Batch   40/1562 - Loss:  1.430, Seconds: 2.24\n","Epoch   7/100 Batch   60/1562 - Loss:  1.445, Seconds: 2.30\n","Epoch   7/100 Batch   80/1562 - Loss:  1.438, Seconds: 2.53\n","Epoch   7/100 Batch  100/1562 - Loss:  1.416, Seconds: 2.57\n","Epoch   7/100 Batch  120/1562 - Loss:  1.396, Seconds: 2.18\n","Epoch   7/100 Batch  140/1562 - Loss:  1.272, Seconds: 2.71\n","Epoch   7/100 Batch  160/1562 - Loss:  1.297, Seconds: 2.12\n","Epoch   7/100 Batch  180/1562 - Loss:  1.243, Seconds: 2.22\n","Epoch   7/100 Batch  200/1562 - Loss:  1.357, Seconds: 2.63\n","Epoch   7/100 Batch  220/1562 - Loss:  1.386, Seconds: 2.52\n","Epoch   7/100 Batch  240/1562 - Loss:  1.369, Seconds: 2.38\n","Epoch   7/100 Batch  260/1562 - Loss:  1.279, Seconds: 2.60\n","Epoch   7/100 Batch  280/1562 - Loss:  1.203, Seconds: 2.39\n","Epoch   7/100 Batch  300/1562 - Loss:  1.135, Seconds: 2.31\n","Epoch   7/100 Batch  320/1562 - Loss:  1.295, Seconds: 2.14\n","Epoch   7/100 Batch  340/1562 - Loss:  1.308, Seconds: 2.26\n","Epoch   7/100 Batch  360/1562 - Loss:  1.474, Seconds: 2.79\n","Epoch   7/100 Batch  380/1562 - Loss:  1.388, Seconds: 2.49\n","Epoch   7/100 Batch  400/1562 - Loss:  1.326, Seconds: 2.27\n","Epoch   7/100 Batch  420/1562 - Loss:  1.210, Seconds: 2.45\n","Epoch   7/100 Batch  440/1562 - Loss:  1.187, Seconds: 2.56\n","Epoch   7/100 Batch  460/1562 - Loss:  1.237, Seconds: 2.69\n","Epoch   7/100 Batch  480/1562 - Loss:  1.333, Seconds: 2.60\n","Epoch   7/100 Batch  500/1562 - Loss:  1.417, Seconds: 2.43\n","Average loss for this update: 1.337\n","New Record!\n","Epoch   7/100 Batch  520/1562 - Loss:  1.276, Seconds: 2.72\n","Epoch   7/100 Batch  540/1562 - Loss:  1.357, Seconds: 2.38\n","Epoch   7/100 Batch  560/1562 - Loss:  1.205, Seconds: 2.25\n","Epoch   7/100 Batch  580/1562 - Loss:  1.216, Seconds: 3.05\n","Epoch   7/100 Batch  600/1562 - Loss:  1.277, Seconds: 3.18\n","Epoch   7/100 Batch  620/1562 - Loss:  1.312, Seconds: 2.39\n","Epoch   7/100 Batch  640/1562 - Loss:  1.493, Seconds: 2.64\n","Epoch   7/100 Batch  660/1562 - Loss:  1.372, Seconds: 2.51\n","Epoch   7/100 Batch  680/1562 - Loss:  1.349, Seconds: 2.53\n","Epoch   7/100 Batch  700/1562 - Loss:  1.214, Seconds: 2.52\n","Epoch   7/100 Batch  720/1562 - Loss:  1.194, Seconds: 2.76\n","Epoch   7/100 Batch  740/1562 - Loss:  1.210, Seconds: 2.77\n","Epoch   7/100 Batch  760/1562 - Loss:  1.461, Seconds: 2.50\n","Epoch   7/100 Batch  780/1562 - Loss:  1.464, Seconds: 2.38\n","Epoch   7/100 Batch  800/1562 - Loss:  1.350, Seconds: 2.44\n","Epoch   7/100 Batch  820/1562 - Loss:  1.206, Seconds: 2.54\n","Epoch   7/100 Batch  840/1562 - Loss:  1.278, Seconds: 2.41\n","Epoch   7/100 Batch  860/1562 - Loss:  1.256, Seconds: 3.00\n","Epoch   7/100 Batch  880/1562 - Loss:  1.448, Seconds: 2.49\n","Epoch   7/100 Batch  900/1562 - Loss:  1.434, Seconds: 2.69\n","Epoch   7/100 Batch  920/1562 - Loss:  1.334, Seconds: 2.53\n","Epoch   7/100 Batch  940/1562 - Loss:  1.363, Seconds: 2.37\n","Epoch   7/100 Batch  960/1562 - Loss:  1.358, Seconds: 2.88\n","Epoch   7/100 Batch  980/1562 - Loss:  1.193, Seconds: 2.68\n","Epoch   7/100 Batch 1000/1562 - Loss:  1.472, Seconds: 2.68\n","Epoch   7/100 Batch 1020/1562 - Loss:  1.329, Seconds: 3.03\n","Average loss for this update: 1.325\n","New Record!\n","Epoch   7/100 Batch 1040/1562 - Loss:  1.329, Seconds: 2.76\n","Epoch   7/100 Batch 1060/1562 - Loss:  1.249, Seconds: 2.74\n","Epoch   7/100 Batch 1080/1562 - Loss:  1.227, Seconds: 2.64\n","Epoch   7/100 Batch 1100/1562 - Loss:  1.330, Seconds: 3.07\n","Epoch   7/100 Batch 1120/1562 - Loss:  1.463, Seconds: 4.21\n","Epoch   7/100 Batch 1140/1562 - Loss:  1.325, Seconds: 2.75\n","Epoch   7/100 Batch 1160/1562 - Loss:  1.214, Seconds: 2.62\n","Epoch   7/100 Batch 1180/1562 - Loss:  1.312, Seconds: 2.75\n","Epoch   7/100 Batch 1200/1562 - Loss:  1.295, Seconds: 2.70\n","Epoch   7/100 Batch 1220/1562 - Loss:  1.458, Seconds: 2.92\n","Epoch   7/100 Batch 1240/1562 - Loss:  1.386, Seconds: 2.79\n","Epoch   7/100 Batch 1260/1562 - Loss:  1.303, Seconds: 2.91\n","Epoch   7/100 Batch 1280/1562 - Loss:  1.299, Seconds: 2.57\n","Epoch   7/100 Batch 1300/1562 - Loss:  1.263, Seconds: 2.72\n","Epoch   7/100 Batch 1320/1562 - Loss:  1.455, Seconds: 3.06\n","Epoch   7/100 Batch 1340/1562 - Loss:  1.412, Seconds: 2.94\n","Epoch   7/100 Batch 1360/1562 - Loss:  1.314, Seconds: 3.02\n","Epoch   7/100 Batch 1380/1562 - Loss:  1.226, Seconds: 2.79\n","Epoch   7/100 Batch 1400/1562 - Loss:  1.266, Seconds: 3.11\n","Epoch   7/100 Batch 1420/1562 - Loss:  1.418, Seconds: 3.05\n","Epoch   7/100 Batch 1440/1562 - Loss:  1.395, Seconds: 2.97\n","Epoch   7/100 Batch 1460/1562 - Loss:  1.326, Seconds: 2.96\n","Epoch   7/100 Batch 1480/1562 - Loss:  1.285, Seconds: 3.24\n","Epoch   7/100 Batch 1500/1562 - Loss:  1.271, Seconds: 3.17\n","Epoch   7/100 Batch 1520/1562 - Loss:  1.514, Seconds: 3.06\n","Epoch   7/100 Batch 1540/1562 - Loss:  1.355, Seconds: 2.93\n","Average loss for this update: 1.334\n","No Improvement.\n","Epoch   7/100 Batch 1560/1562 - Loss:  1.314, Seconds: 2.98\n","Epoch   8/100 Batch   20/1562 - Loss:  1.552, Seconds: 2.39\n","Epoch   8/100 Batch   40/1562 - Loss:  1.378, Seconds: 2.16\n","Epoch   8/100 Batch   60/1562 - Loss:  1.389, Seconds: 2.37\n","Epoch   8/100 Batch   80/1562 - Loss:  1.363, Seconds: 2.24\n","Epoch   8/100 Batch  100/1562 - Loss:  1.355, Seconds: 2.09\n","Epoch   8/100 Batch  120/1562 - Loss:  1.347, Seconds: 2.32\n","Epoch   8/100 Batch  140/1562 - Loss:  1.212, Seconds: 2.55\n","Epoch   8/100 Batch  160/1562 - Loss:  1.249, Seconds: 2.08\n","Epoch   8/100 Batch  180/1562 - Loss:  1.202, Seconds: 2.25\n","Epoch   8/100 Batch  200/1562 - Loss:  1.305, Seconds: 2.47\n","Epoch   8/100 Batch  220/1562 - Loss:  1.325, Seconds: 2.58\n","Epoch   8/100 Batch  240/1562 - Loss:  1.315, Seconds: 2.51\n","Epoch   8/100 Batch  260/1562 - Loss:  1.235, Seconds: 2.69\n","Epoch   8/100 Batch  280/1562 - Loss:  1.148, Seconds: 2.44\n","Epoch   8/100 Batch  300/1562 - Loss:  1.081, Seconds: 2.54\n","Epoch   8/100 Batch  320/1562 - Loss:  1.230, Seconds: 2.20\n","Epoch   8/100 Batch  340/1562 - Loss:  1.256, Seconds: 2.29\n","Epoch   8/100 Batch  360/1562 - Loss:  1.411, Seconds: 2.79\n","Epoch   8/100 Batch  380/1562 - Loss:  1.335, Seconds: 2.57\n","Epoch   8/100 Batch  400/1562 - Loss:  1.268, Seconds: 2.37\n","Epoch   8/100 Batch  420/1562 - Loss:  1.169, Seconds: 2.59\n","Epoch   8/100 Batch  440/1562 - Loss:  1.152, Seconds: 2.55\n","Epoch   8/100 Batch  460/1562 - Loss:  1.190, Seconds: 2.48\n","Epoch   8/100 Batch  480/1562 - Loss:  1.285, Seconds: 2.51\n","Epoch   8/100 Batch  500/1562 - Loss:  1.356, Seconds: 2.34\n","Average loss for this update: 1.283\n","New Record!\n","Epoch   8/100 Batch  520/1562 - Loss:  1.225, Seconds: 2.65\n","Epoch   8/100 Batch  540/1562 - Loss:  1.284, Seconds: 2.64\n","Epoch   8/100 Batch  560/1562 - Loss:  1.153, Seconds: 2.47\n","Epoch   8/100 Batch  580/1562 - Loss:  1.159, Seconds: 2.45\n","Epoch   8/100 Batch  600/1562 - Loss:  1.216, Seconds: 2.90\n","Epoch   8/100 Batch  620/1562 - Loss:  1.249, Seconds: 2.27\n","Epoch   8/100 Batch  640/1562 - Loss:  1.423, Seconds: 2.83\n","Epoch   8/100 Batch  660/1562 - Loss:  1.317, Seconds: 2.43\n","Epoch   8/100 Batch  680/1562 - Loss:  1.289, Seconds: 2.33\n","Epoch   8/100 Batch  700/1562 - Loss:  1.168, Seconds: 2.60\n","Epoch   8/100 Batch  720/1562 - Loss:  1.147, Seconds: 2.77\n","Epoch   8/100 Batch  740/1562 - Loss:  1.170, Seconds: 2.71\n","Epoch   8/100 Batch  760/1562 - Loss:  1.410, Seconds: 2.74\n","Epoch   8/100 Batch  780/1562 - Loss:  1.427, Seconds: 2.30\n","Epoch   8/100 Batch  800/1562 - Loss:  1.303, Seconds: 2.60\n","Epoch   8/100 Batch  820/1562 - Loss:  1.167, Seconds: 2.36\n","Epoch   8/100 Batch  840/1562 - Loss:  1.233, Seconds: 2.47\n","Epoch   8/100 Batch  860/1562 - Loss:  1.214, Seconds: 2.73\n","Epoch   8/100 Batch  880/1562 - Loss:  1.370, Seconds: 2.52\n","Epoch   8/100 Batch  900/1562 - Loss:  1.379, Seconds: 2.69\n","Epoch   8/100 Batch  920/1562 - Loss:  1.290, Seconds: 2.63\n","Epoch   8/100 Batch  940/1562 - Loss:  1.303, Seconds: 2.59\n","Epoch   8/100 Batch  960/1562 - Loss:  1.299, Seconds: 2.51\n","Epoch   8/100 Batch  980/1562 - Loss:  1.150, Seconds: 2.63\n","Epoch   8/100 Batch 1000/1562 - Loss:  1.410, Seconds: 2.74\n","Epoch   8/100 Batch 1020/1562 - Loss:  1.283, Seconds: 2.65\n","Average loss for this update: 1.272\n","New Record!\n","Epoch   8/100 Batch 1040/1562 - Loss:  1.269, Seconds: 2.80\n","Epoch   8/100 Batch 1060/1562 - Loss:  1.201, Seconds: 2.73\n","Epoch   8/100 Batch 1080/1562 - Loss:  1.184, Seconds: 2.72\n","Epoch   8/100 Batch 1100/1562 - Loss:  1.259, Seconds: 3.51\n","Epoch   8/100 Batch 1120/1562 - Loss:  1.401, Seconds: 3.70\n","Epoch   8/100 Batch 1140/1562 - Loss:  1.272, Seconds: 3.03\n","Epoch   8/100 Batch 1160/1562 - Loss:  1.174, Seconds: 2.62\n","Epoch   8/100 Batch 1180/1562 - Loss:  1.265, Seconds: 2.84\n","Epoch   8/100 Batch 1200/1562 - Loss:  1.242, Seconds: 2.62\n","Epoch   8/100 Batch 1220/1562 - Loss:  1.410, Seconds: 2.89\n","Epoch   8/100 Batch 1240/1562 - Loss:  1.329, Seconds: 2.77\n","Epoch   8/100 Batch 1260/1562 - Loss:  1.251, Seconds: 2.82\n","Epoch   8/100 Batch 1280/1562 - Loss:  1.262, Seconds: 2.68\n","Epoch   8/100 Batch 1300/1562 - Loss:  1.223, Seconds: 2.61\n","Epoch   8/100 Batch 1320/1562 - Loss:  1.398, Seconds: 3.09\n","Epoch   8/100 Batch 1340/1562 - Loss:  1.362, Seconds: 3.29\n","Epoch   8/100 Batch 1360/1562 - Loss:  1.269, Seconds: 2.92\n","Epoch   8/100 Batch 1380/1562 - Loss:  1.174, Seconds: 2.60\n","Epoch   8/100 Batch 1400/1562 - Loss:  1.223, Seconds: 3.17\n","Epoch   8/100 Batch 1420/1562 - Loss:  1.351, Seconds: 2.98\n","Epoch   8/100 Batch 1440/1562 - Loss:  1.345, Seconds: 2.89\n","Epoch   8/100 Batch 1460/1562 - Loss:  1.277, Seconds: 3.04\n","Epoch   8/100 Batch 1480/1562 - Loss:  1.227, Seconds: 3.05\n","Epoch   8/100 Batch 1500/1562 - Loss:  1.233, Seconds: 3.05\n","Epoch   8/100 Batch 1520/1562 - Loss:  1.462, Seconds: 3.35\n","Epoch   8/100 Batch 1540/1562 - Loss:  1.305, Seconds: 3.06\n","Average loss for this update: 1.284\n","No Improvement.\n","Epoch   8/100 Batch 1560/1562 - Loss:  1.281, Seconds: 3.14\n","Epoch   9/100 Batch   20/1562 - Loss:  1.506, Seconds: 2.44\n","Epoch   9/100 Batch   40/1562 - Loss:  1.320, Seconds: 2.20\n","Epoch   9/100 Batch   60/1562 - Loss:  1.340, Seconds: 2.36\n","Epoch   9/100 Batch   80/1562 - Loss:  1.310, Seconds: 2.15\n","Epoch   9/100 Batch  100/1562 - Loss:  1.304, Seconds: 2.18\n","Epoch   9/100 Batch  120/1562 - Loss:  1.287, Seconds: 2.37\n","Epoch   9/100 Batch  140/1562 - Loss:  1.173, Seconds: 2.55\n","Epoch   9/100 Batch  160/1562 - Loss:  1.204, Seconds: 2.19\n","Epoch   9/100 Batch  180/1562 - Loss:  1.163, Seconds: 2.27\n","Epoch   9/100 Batch  200/1562 - Loss:  1.254, Seconds: 2.42\n","Epoch   9/100 Batch  220/1562 - Loss:  1.283, Seconds: 2.57\n","Epoch   9/100 Batch  240/1562 - Loss:  1.276, Seconds: 2.73\n","Epoch   9/100 Batch  260/1562 - Loss:  1.188, Seconds: 2.54\n","Epoch   9/100 Batch  280/1562 - Loss:  1.119, Seconds: 2.53\n","Epoch   9/100 Batch  300/1562 - Loss:  1.046, Seconds: 2.41\n","Epoch   9/100 Batch  320/1562 - Loss:  1.203, Seconds: 2.14\n","Epoch   9/100 Batch  340/1562 - Loss:  1.214, Seconds: 2.28\n","Epoch   9/100 Batch  360/1562 - Loss:  1.365, Seconds: 2.55\n","Epoch   9/100 Batch  380/1562 - Loss:  1.290, Seconds: 2.51\n","Epoch   9/100 Batch  400/1562 - Loss:  1.231, Seconds: 2.36\n","Epoch   9/100 Batch  420/1562 - Loss:  1.139, Seconds: 2.51\n","Epoch   9/100 Batch  440/1562 - Loss:  1.102, Seconds: 2.50\n","Epoch   9/100 Batch  460/1562 - Loss:  1.160, Seconds: 2.47\n","Epoch   9/100 Batch  480/1562 - Loss:  1.217, Seconds: 2.51\n","Epoch   9/100 Batch  500/1562 - Loss:  1.309, Seconds: 2.27\n","Average loss for this update: 1.238\n","New Record!\n","Epoch   9/100 Batch  520/1562 - Loss:  1.176, Seconds: 2.92\n","Epoch   9/100 Batch  540/1562 - Loss:  1.258, Seconds: 2.52\n","Epoch   9/100 Batch  560/1562 - Loss:  1.120, Seconds: 2.13\n","Epoch   9/100 Batch  580/1562 - Loss:  1.131, Seconds: 2.45\n","Epoch   9/100 Batch  600/1562 - Loss:  1.183, Seconds: 3.28\n","Epoch   9/100 Batch  620/1562 - Loss:  1.210, Seconds: 2.91\n","Epoch   9/100 Batch  640/1562 - Loss:  1.383, Seconds: 2.62\n","Epoch   9/100 Batch  660/1562 - Loss:  1.282, Seconds: 2.54\n","Epoch   9/100 Batch  680/1562 - Loss:  1.250, Seconds: 2.54\n","Epoch   9/100 Batch  700/1562 - Loss:  1.123, Seconds: 2.58\n","Epoch   9/100 Batch  720/1562 - Loss:  1.106, Seconds: 2.58\n","Epoch   9/100 Batch  740/1562 - Loss:  1.126, Seconds: 2.71\n","Epoch   9/100 Batch  760/1562 - Loss:  1.353, Seconds: 2.53\n","Epoch   9/100 Batch  780/1562 - Loss:  1.369, Seconds: 2.37\n","Epoch   9/100 Batch  800/1562 - Loss:  1.252, Seconds: 2.38\n","Epoch   9/100 Batch  820/1562 - Loss:  1.129, Seconds: 2.39\n","Epoch   9/100 Batch  840/1562 - Loss:  1.197, Seconds: 2.52\n","Epoch   9/100 Batch  860/1562 - Loss:  1.182, Seconds: 2.76\n","Epoch   9/100 Batch  880/1562 - Loss:  1.318, Seconds: 2.46\n","Epoch   9/100 Batch  900/1562 - Loss:  1.337, Seconds: 2.61\n","Epoch   9/100 Batch  920/1562 - Loss:  1.243, Seconds: 2.62\n","Epoch   9/100 Batch  940/1562 - Loss:  1.253, Seconds: 2.51\n","Epoch   9/100 Batch  960/1562 - Loss:  1.271, Seconds: 2.63\n","Epoch   9/100 Batch  980/1562 - Loss:  1.120, Seconds: 2.69\n","Epoch   9/100 Batch 1000/1562 - Loss:  1.353, Seconds: 2.63\n","Epoch   9/100 Batch 1020/1562 - Loss:  1.236, Seconds: 2.67\n","Average loss for this update: 1.23\n","New Record!\n","Epoch   9/100 Batch 1040/1562 - Loss:  1.215, Seconds: 2.81\n","Epoch   9/100 Batch 1060/1562 - Loss:  1.153, Seconds: 2.68\n","Epoch   9/100 Batch 1080/1562 - Loss:  1.140, Seconds: 2.84\n","Epoch   9/100 Batch 1100/1562 - Loss:  1.230, Seconds: 3.14\n","Epoch   9/100 Batch 1120/1562 - Loss:  1.362, Seconds: 3.43\n","Epoch   9/100 Batch 1140/1562 - Loss:  1.231, Seconds: 3.05\n","Epoch   9/100 Batch 1160/1562 - Loss:  1.140, Seconds: 2.67\n","Epoch   9/100 Batch 1180/1562 - Loss:  1.228, Seconds: 2.76\n","Epoch   9/100 Batch 1200/1562 - Loss:  1.204, Seconds: 2.59\n","Epoch   9/100 Batch 1220/1562 - Loss:  1.372, Seconds: 3.11\n","Epoch   9/100 Batch 1240/1562 - Loss:  1.293, Seconds: 2.76\n","Epoch   9/100 Batch 1260/1562 - Loss:  1.219, Seconds: 2.81\n","Epoch   9/100 Batch 1280/1562 - Loss:  1.219, Seconds: 2.63\n","Epoch   9/100 Batch 1300/1562 - Loss:  1.187, Seconds: 2.73\n","Epoch   9/100 Batch 1320/1562 - Loss:  1.372, Seconds: 3.12\n","Epoch   9/100 Batch 1340/1562 - Loss:  1.313, Seconds: 3.07\n","Epoch   9/100 Batch 1360/1562 - Loss:  1.251, Seconds: 2.94\n","Epoch   9/100 Batch 1380/1562 - Loss:  1.140, Seconds: 2.77\n","Epoch   9/100 Batch 1400/1562 - Loss:  1.182, Seconds: 3.05\n","Epoch   9/100 Batch 1420/1562 - Loss:  1.303, Seconds: 2.97\n","Epoch   9/100 Batch 1440/1562 - Loss:  1.301, Seconds: 2.97\n","Epoch   9/100 Batch 1460/1562 - Loss:  1.246, Seconds: 2.88\n","Epoch   9/100 Batch 1480/1562 - Loss:  1.195, Seconds: 2.93\n","Epoch   9/100 Batch 1500/1562 - Loss:  1.196, Seconds: 2.95\n","Epoch   9/100 Batch 1520/1562 - Loss:  1.409, Seconds: 3.29\n","Epoch   9/100 Batch 1540/1562 - Loss:  1.266, Seconds: 3.02\n","Average loss for this update: 1.247\n","No Improvement.\n","Epoch   9/100 Batch 1560/1562 - Loss:  1.237, Seconds: 3.10\n","Epoch  10/100 Batch   20/1562 - Loss:  1.460, Seconds: 2.45\n","Epoch  10/100 Batch   40/1562 - Loss:  1.278, Seconds: 2.19\n","Epoch  10/100 Batch   60/1562 - Loss:  1.290, Seconds: 2.38\n","Epoch  10/100 Batch   80/1562 - Loss:  1.266, Seconds: 2.19\n","Epoch  10/100 Batch  100/1562 - Loss:  1.247, Seconds: 2.23\n","Epoch  10/100 Batch  120/1562 - Loss:  1.264, Seconds: 2.61\n","Epoch  10/100 Batch  140/1562 - Loss:  1.121, Seconds: 2.58\n","Epoch  10/100 Batch  160/1562 - Loss:  1.154, Seconds: 2.22\n","Epoch  10/100 Batch  180/1562 - Loss:  1.118, Seconds: 2.54\n","Epoch  10/100 Batch  200/1562 - Loss:  1.206, Seconds: 2.37\n","Epoch  10/100 Batch  220/1562 - Loss:  1.237, Seconds: 2.43\n","Epoch  10/100 Batch  240/1562 - Loss:  1.235, Seconds: 2.76\n","Epoch  10/100 Batch  260/1562 - Loss:  1.149, Seconds: 2.46\n","Epoch  10/100 Batch  280/1562 - Loss:  1.080, Seconds: 2.35\n","Epoch  10/100 Batch  300/1562 - Loss:  1.018, Seconds: 2.31\n","Epoch  10/100 Batch  320/1562 - Loss:  1.171, Seconds: 2.25\n","Epoch  10/100 Batch  340/1562 - Loss:  1.165, Seconds: 2.30\n","Epoch  10/100 Batch  360/1562 - Loss:  1.312, Seconds: 2.62\n","Epoch  10/100 Batch  380/1562 - Loss:  1.249, Seconds: 2.46\n","Epoch  10/100 Batch  400/1562 - Loss:  1.191, Seconds: 2.58\n","Epoch  10/100 Batch  420/1562 - Loss:  1.099, Seconds: 2.72\n","Epoch  10/100 Batch  440/1562 - Loss:  1.082, Seconds: 2.59\n","Epoch  10/100 Batch  460/1562 - Loss:  1.111, Seconds: 2.45\n","Epoch  10/100 Batch  480/1562 - Loss:  1.186, Seconds: 2.53\n","Epoch  10/100 Batch  500/1562 - Loss:  1.273, Seconds: 2.35\n","Average loss for this update: 1.197\n","New Record!\n","Epoch  10/100 Batch  520/1562 - Loss:  1.143, Seconds: 2.95\n","Epoch  10/100 Batch  540/1562 - Loss:  1.216, Seconds: 2.45\n","Epoch  10/100 Batch  560/1562 - Loss:  1.086, Seconds: 2.33\n","Epoch  10/100 Batch  580/1562 - Loss:  1.100, Seconds: 2.31\n","Epoch  10/100 Batch  600/1562 - Loss:  1.152, Seconds: 4.54\n","Epoch  10/100 Batch  620/1562 - Loss:  1.164, Seconds: 2.51\n","Epoch  10/100 Batch  640/1562 - Loss:  1.318, Seconds: 2.69\n","Epoch  10/100 Batch  660/1562 - Loss:  1.232, Seconds: 2.51\n","Epoch  10/100 Batch  680/1562 - Loss:  1.214, Seconds: 2.67\n","Epoch  10/100 Batch  700/1562 - Loss:  1.095, Seconds: 2.66\n","Epoch  10/100 Batch  720/1562 - Loss:  1.082, Seconds: 2.67\n","Epoch  10/100 Batch  740/1562 - Loss:  1.099, Seconds: 2.97\n","Epoch  10/100 Batch  760/1562 - Loss:  1.328, Seconds: 2.48\n","Epoch  10/100 Batch  780/1562 - Loss:  1.322, Seconds: 2.42\n","Epoch  10/100 Batch  800/1562 - Loss:  1.216, Seconds: 2.43\n","Epoch  10/100 Batch  820/1562 - Loss:  1.091, Seconds: 2.31\n","Epoch  10/100 Batch  840/1562 - Loss:  1.173, Seconds: 2.43\n","Epoch  10/100 Batch  860/1562 - Loss:  1.140, Seconds: 2.68\n","Epoch  10/100 Batch  880/1562 - Loss:  1.284, Seconds: 2.45\n","Epoch  10/100 Batch  900/1562 - Loss:  1.281, Seconds: 2.73\n","Epoch  10/100 Batch  920/1562 - Loss:  1.201, Seconds: 2.70\n","Epoch  10/100 Batch  940/1562 - Loss:  1.229, Seconds: 2.39\n","Epoch  10/100 Batch  960/1562 - Loss:  1.235, Seconds: 2.44\n","Epoch  10/100 Batch  980/1562 - Loss:  1.084, Seconds: 2.69\n","Epoch  10/100 Batch 1000/1562 - Loss:  1.320, Seconds: 2.62\n","Epoch  10/100 Batch 1020/1562 - Loss:  1.196, Seconds: 2.80\n","Average loss for this update: 1.193\n","New Record!\n","Epoch  10/100 Batch 1040/1562 - Loss:  1.185, Seconds: 2.71\n","Epoch  10/100 Batch 1060/1562 - Loss:  1.122, Seconds: 2.66\n","Epoch  10/100 Batch 1080/1562 - Loss:  1.124, Seconds: 2.70\n","Epoch  10/100 Batch 1100/1562 - Loss:  1.188, Seconds: 2.85\n","Epoch  10/100 Batch 1120/1562 - Loss:  1.337, Seconds: 3.77\n","Epoch  10/100 Batch 1140/1562 - Loss:  1.197, Seconds: 2.79\n","Epoch  10/100 Batch 1160/1562 - Loss:  1.109, Seconds: 2.82\n","Epoch  10/100 Batch 1180/1562 - Loss:  1.218, Seconds: 2.61\n","Epoch  10/100 Batch 1200/1562 - Loss:  1.175, Seconds: 2.67\n","Epoch  10/100 Batch 1220/1562 - Loss:  1.325, Seconds: 2.86\n","Epoch  10/100 Batch 1240/1562 - Loss:  1.259, Seconds: 3.04\n","Epoch  10/100 Batch 1260/1562 - Loss:  1.180, Seconds: 2.86\n","Epoch  10/100 Batch 1280/1562 - Loss:  1.192, Seconds: 2.59\n","Epoch  10/100 Batch 1300/1562 - Loss:  1.156, Seconds: 2.68\n","Epoch  10/100 Batch 1320/1562 - Loss:  1.325, Seconds: 3.04\n","Epoch  10/100 Batch 1340/1562 - Loss:  1.276, Seconds: 3.00\n","Epoch  10/100 Batch 1360/1562 - Loss:  1.209, Seconds: 3.05\n","Epoch  10/100 Batch 1380/1562 - Loss:  1.116, Seconds: 2.76\n","Epoch  10/100 Batch 1400/1562 - Loss:  1.157, Seconds: 3.02\n","Epoch  10/100 Batch 1420/1562 - Loss:  1.262, Seconds: 2.94\n","Epoch  10/100 Batch 1440/1562 - Loss:  1.263, Seconds: 3.08\n","Epoch  10/100 Batch 1460/1562 - Loss:  1.211, Seconds: 3.05\n","Epoch  10/100 Batch 1480/1562 - Loss:  1.148, Seconds: 3.00\n","Epoch  10/100 Batch 1500/1562 - Loss:  1.161, Seconds: 2.91\n","Epoch  10/100 Batch 1520/1562 - Loss:  1.371, Seconds: 3.09\n","Epoch  10/100 Batch 1540/1562 - Loss:  1.226, Seconds: 2.93\n","Average loss for this update: 1.212\n","No Improvement.\n","Epoch  10/100 Batch 1560/1562 - Loss:  1.200, Seconds: 2.88\n","Epoch  11/100 Batch   20/1562 - Loss:  1.434, Seconds: 2.64\n","Epoch  11/100 Batch   40/1562 - Loss:  1.248, Seconds: 2.21\n","Epoch  11/100 Batch   60/1562 - Loss:  1.252, Seconds: 2.35\n","Epoch  11/100 Batch   80/1562 - Loss:  1.221, Seconds: 2.32\n","Epoch  11/100 Batch  100/1562 - Loss:  1.209, Seconds: 2.24\n","Epoch  11/100 Batch  120/1562 - Loss:  1.221, Seconds: 2.26\n","Epoch  11/100 Batch  140/1562 - Loss:  1.105, Seconds: 2.47\n","Epoch  11/100 Batch  160/1562 - Loss:  1.124, Seconds: 2.14\n","Epoch  11/100 Batch  180/1562 - Loss:  1.096, Seconds: 2.16\n","Epoch  11/100 Batch  200/1562 - Loss:  1.178, Seconds: 2.45\n","Epoch  11/100 Batch  220/1562 - Loss:  1.223, Seconds: 2.47\n","Epoch  11/100 Batch  240/1562 - Loss:  1.192, Seconds: 2.59\n","Epoch  11/100 Batch  260/1562 - Loss:  1.114, Seconds: 2.67\n","Epoch  11/100 Batch  280/1562 - Loss:  1.049, Seconds: 2.44\n","Epoch  11/100 Batch  300/1562 - Loss:  0.977, Seconds: 2.39\n","Epoch  11/100 Batch  320/1562 - Loss:  1.138, Seconds: 2.24\n","Epoch  11/100 Batch  340/1562 - Loss:  1.143, Seconds: 2.34\n","Epoch  11/100 Batch  360/1562 - Loss:  1.275, Seconds: 2.58\n","Epoch  11/100 Batch  380/1562 - Loss:  1.207, Seconds: 2.50\n","Epoch  11/100 Batch  400/1562 - Loss:  1.155, Seconds: 2.28\n","Epoch  11/100 Batch  420/1562 - Loss:  1.066, Seconds: 2.55\n","Epoch  11/100 Batch  440/1562 - Loss:  1.037, Seconds: 2.55\n","Epoch  11/100 Batch  460/1562 - Loss:  1.089, Seconds: 2.57\n","Epoch  11/100 Batch  480/1562 - Loss:  1.162, Seconds: 2.53\n","Epoch  11/100 Batch  500/1562 - Loss:  1.230, Seconds: 2.55\n","Average loss for this update: 1.164\n","New Record!\n","Epoch  11/100 Batch  520/1562 - Loss:  1.111, Seconds: 2.89\n","Epoch  11/100 Batch  540/1562 - Loss:  1.194, Seconds: 2.36\n","Epoch  11/100 Batch  560/1562 - Loss:  1.071, Seconds: 2.24\n","Epoch  11/100 Batch  580/1562 - Loss:  1.069, Seconds: 2.32\n","Epoch  11/100 Batch  600/1562 - Loss:  1.108, Seconds: 2.64\n","Epoch  11/100 Batch  620/1562 - Loss:  1.145, Seconds: 2.38\n","Epoch  11/100 Batch  640/1562 - Loss:  1.286, Seconds: 2.67\n","Epoch  11/100 Batch  660/1562 - Loss:  1.185, Seconds: 2.43\n","Epoch  11/100 Batch  680/1562 - Loss:  1.178, Seconds: 2.44\n","Epoch  11/100 Batch  700/1562 - Loss:  1.061, Seconds: 2.57\n","Epoch  11/100 Batch  720/1562 - Loss:  1.053, Seconds: 2.66\n","Epoch  11/100 Batch  740/1562 - Loss:  1.074, Seconds: 2.91\n","Epoch  11/100 Batch  760/1562 - Loss:  1.290, Seconds: 2.51\n","Epoch  11/100 Batch  780/1562 - Loss:  1.302, Seconds: 2.20\n","Epoch  11/100 Batch  800/1562 - Loss:  1.186, Seconds: 2.39\n","Epoch  11/100 Batch  820/1562 - Loss:  1.069, Seconds: 2.36\n","Epoch  11/100 Batch  840/1562 - Loss:  1.143, Seconds: 2.69\n","Epoch  11/100 Batch  860/1562 - Loss:  1.124, Seconds: 2.69\n","Epoch  11/100 Batch  880/1562 - Loss:  1.259, Seconds: 2.52\n","Epoch  11/100 Batch  900/1562 - Loss:  1.265, Seconds: 2.70\n","Epoch  11/100 Batch  920/1562 - Loss:  1.170, Seconds: 2.60\n","Epoch  11/100 Batch  940/1562 - Loss:  1.191, Seconds: 2.64\n","Epoch  11/100 Batch  960/1562 - Loss:  1.203, Seconds: 2.59\n","Epoch  11/100 Batch  980/1562 - Loss:  1.062, Seconds: 2.73\n","Epoch  11/100 Batch 1000/1562 - Loss:  1.290, Seconds: 2.89\n","Epoch  11/100 Batch 1020/1562 - Loss:  1.172, Seconds: 2.59\n","Average loss for this update: 1.165\n","No Improvement.\n","Epoch  11/100 Batch 1040/1562 - Loss:  1.172, Seconds: 2.75\n","Epoch  11/100 Batch 1060/1562 - Loss:  1.092, Seconds: 2.77\n","Epoch  11/100 Batch 1080/1562 - Loss:  1.093, Seconds: 2.63\n","Epoch  11/100 Batch 1100/1562 - Loss:  1.157, Seconds: 2.77\n","Epoch  11/100 Batch 1120/1562 - Loss:  1.299, Seconds: 2.75\n","Epoch  11/100 Batch 1140/1562 - Loss:  1.174, Seconds: 3.11\n","Epoch  11/100 Batch 1160/1562 - Loss:  1.077, Seconds: 2.63\n","Epoch  11/100 Batch 1180/1562 - Loss:  1.168, Seconds: 2.80\n","Epoch  11/100 Batch 1200/1562 - Loss:  1.144, Seconds: 2.62\n","Epoch  11/100 Batch 1220/1562 - Loss:  1.294, Seconds: 2.86\n","Epoch  11/100 Batch 1240/1562 - Loss:  1.226, Seconds: 2.75\n","Epoch  11/100 Batch 1260/1562 - Loss:  1.153, Seconds: 3.09\n","Epoch  11/100 Batch 1280/1562 - Loss:  1.145, Seconds: 2.70\n","Epoch  11/100 Batch 1300/1562 - Loss:  1.116, Seconds: 2.71\n","Epoch  11/100 Batch 1320/1562 - Loss:  1.295, Seconds: 3.00\n","Epoch  11/100 Batch 1340/1562 - Loss:  1.255, Seconds: 3.04\n","Epoch  11/100 Batch 1360/1562 - Loss:  1.175, Seconds: 3.16\n","Epoch  11/100 Batch 1380/1562 - Loss:  1.084, Seconds: 2.86\n","Epoch  11/100 Batch 1400/1562 - Loss:  1.134, Seconds: 3.28\n","Epoch  11/100 Batch 1420/1562 - Loss:  1.233, Seconds: 3.01\n","Epoch  11/100 Batch 1440/1562 - Loss:  1.244, Seconds: 3.04\n","Epoch  11/100 Batch 1460/1562 - Loss:  1.180, Seconds: 3.13\n","Epoch  11/100 Batch 1480/1562 - Loss:  1.140, Seconds: 2.99\n","Epoch  11/100 Batch 1500/1562 - Loss:  1.144, Seconds: 2.86\n","Epoch  11/100 Batch 1520/1562 - Loss:  1.339, Seconds: 3.17\n","Epoch  11/100 Batch 1540/1562 - Loss:  1.199, Seconds: 3.06\n","Average loss for this update: 1.183\n","No Improvement.\n","Epoch  11/100 Batch 1560/1562 - Loss:  1.178, Seconds: 3.06\n","Epoch  12/100 Batch   20/1562 - Loss:  1.394, Seconds: 2.47\n","Epoch  12/100 Batch   40/1562 - Loss:  1.218, Seconds: 2.14\n","Epoch  12/100 Batch   60/1562 - Loss:  1.224, Seconds: 2.48\n","Epoch  12/100 Batch   80/1562 - Loss:  1.206, Seconds: 2.21\n","Epoch  12/100 Batch  100/1562 - Loss:  1.192, Seconds: 2.07\n","Epoch  12/100 Batch  120/1562 - Loss:  1.185, Seconds: 2.43\n","Epoch  12/100 Batch  140/1562 - Loss:  1.063, Seconds: 2.49\n","Epoch  12/100 Batch  160/1562 - Loss:  1.096, Seconds: 2.23\n","Epoch  12/100 Batch  180/1562 - Loss:  1.076, Seconds: 2.23\n","Epoch  12/100 Batch  200/1562 - Loss:  1.150, Seconds: 2.59\n","Epoch  12/100 Batch  220/1562 - Loss:  1.168, Seconds: 2.47\n","Epoch  12/100 Batch  240/1562 - Loss:  1.166, Seconds: 2.69\n","Epoch  12/100 Batch  260/1562 - Loss:  1.077, Seconds: 2.66\n","Epoch  12/100 Batch  280/1562 - Loss:  1.022, Seconds: 2.54\n","Epoch  12/100 Batch  300/1562 - Loss:  0.951, Seconds: 2.54\n","Epoch  12/100 Batch  320/1562 - Loss:  1.103, Seconds: 2.14\n","Epoch  12/100 Batch  340/1562 - Loss:  1.106, Seconds: 2.55\n","Epoch  12/100 Batch  360/1562 - Loss:  1.252, Seconds: 2.77\n","Epoch  12/100 Batch  380/1562 - Loss:  1.183, Seconds: 2.61\n","Epoch  12/100 Batch  400/1562 - Loss:  1.134, Seconds: 2.32\n","Epoch  12/100 Batch  420/1562 - Loss:  1.032, Seconds: 2.53\n","Epoch  12/100 Batch  440/1562 - Loss:  1.023, Seconds: 2.61\n","Epoch  12/100 Batch  460/1562 - Loss:  1.062, Seconds: 2.48\n","Epoch  12/100 Batch  480/1562 - Loss:  1.131, Seconds: 2.72\n","Epoch  12/100 Batch  500/1562 - Loss:  1.217, Seconds: 2.49\n","Average loss for this update: 1.136\n","New Record!\n","Epoch  12/100 Batch  520/1562 - Loss:  1.076, Seconds: 2.83\n","Epoch  12/100 Batch  540/1562 - Loss:  1.171, Seconds: 2.41\n","Epoch  12/100 Batch  560/1562 - Loss:  1.036, Seconds: 2.26\n","Epoch  12/100 Batch  580/1562 - Loss:  1.040, Seconds: 2.38\n","Epoch  12/100 Batch  600/1562 - Loss:  1.092, Seconds: 2.97\n","Epoch  12/100 Batch  620/1562 - Loss:  1.106, Seconds: 2.55\n","Epoch  12/100 Batch  640/1562 - Loss:  1.249, Seconds: 2.65\n","Epoch  12/100 Batch  660/1562 - Loss:  1.154, Seconds: 2.72\n","Epoch  12/100 Batch  680/1562 - Loss:  1.150, Seconds: 2.38\n","Epoch  12/100 Batch  700/1562 - Loss:  1.034, Seconds: 2.70\n","Epoch  12/100 Batch  720/1562 - Loss:  1.024, Seconds: 2.81\n","Epoch  12/100 Batch  740/1562 - Loss:  1.053, Seconds: 2.73\n","Epoch  12/100 Batch  760/1562 - Loss:  1.238, Seconds: 2.61\n","Epoch  12/100 Batch  780/1562 - Loss:  1.254, Seconds: 2.36\n","Epoch  12/100 Batch  800/1562 - Loss:  1.157, Seconds: 2.74\n","Epoch  12/100 Batch  820/1562 - Loss:  1.043, Seconds: 2.47\n","Epoch  12/100 Batch  840/1562 - Loss:  1.109, Seconds: 2.54\n","Epoch  12/100 Batch  860/1562 - Loss:  1.085, Seconds: 2.78\n","Epoch  12/100 Batch  880/1562 - Loss:  1.223, Seconds: 2.63\n","Epoch  12/100 Batch  900/1562 - Loss:  1.227, Seconds: 2.83\n","Epoch  12/100 Batch  920/1562 - Loss:  1.161, Seconds: 2.86\n","Epoch  12/100 Batch  940/1562 - Loss:  1.163, Seconds: 2.41\n","Epoch  12/100 Batch  960/1562 - Loss:  1.170, Seconds: 2.58\n","Epoch  12/100 Batch  980/1562 - Loss:  1.034, Seconds: 2.77\n","Epoch  12/100 Batch 1000/1562 - Loss:  1.261, Seconds: 2.73\n","Epoch  12/100 Batch 1020/1562 - Loss:  1.143, Seconds: 2.74\n","Average loss for this update: 1.134\n","New Record!\n","Epoch  12/100 Batch 1040/1562 - Loss:  1.139, Seconds: 2.86\n","Epoch  12/100 Batch 1060/1562 - Loss:  1.071, Seconds: 2.67\n","Epoch  12/100 Batch 1080/1562 - Loss:  1.082, Seconds: 2.76\n","Epoch  12/100 Batch 1100/1562 - Loss:  1.147, Seconds: 3.29\n","Epoch  12/100 Batch 1120/1562 - Loss:  1.266, Seconds: 3.59\n","Epoch  12/100 Batch 1140/1562 - Loss:  1.153, Seconds: 2.84\n","Epoch  12/100 Batch 1160/1562 - Loss:  1.061, Seconds: 2.65\n","Epoch  12/100 Batch 1180/1562 - Loss:  1.163, Seconds: 2.80\n","Epoch  12/100 Batch 1200/1562 - Loss:  1.119, Seconds: 2.76\n","Epoch  12/100 Batch 1220/1562 - Loss:  1.261, Seconds: 3.11\n","Epoch  12/100 Batch 1240/1562 - Loss:  1.203, Seconds: 2.71\n","Epoch  12/100 Batch 1260/1562 - Loss:  1.122, Seconds: 2.98\n","Epoch  12/100 Batch 1280/1562 - Loss:  1.132, Seconds: 2.79\n","Epoch  12/100 Batch 1300/1562 - Loss:  1.092, Seconds: 2.94\n","Epoch  12/100 Batch 1320/1562 - Loss:  1.266, Seconds: 3.10\n","Epoch  12/100 Batch 1340/1562 - Loss:  1.222, Seconds: 3.08\n","Epoch  12/100 Batch 1360/1562 - Loss:  1.152, Seconds: 3.04\n","Epoch  12/100 Batch 1380/1562 - Loss:  1.063, Seconds: 2.74\n","Epoch  12/100 Batch 1400/1562 - Loss:  1.102, Seconds: 3.07\n","Epoch  12/100 Batch 1420/1562 - Loss:  1.202, Seconds: 3.17\n","Epoch  12/100 Batch 1440/1562 - Loss:  1.195, Seconds: 3.12\n","Epoch  12/100 Batch 1460/1562 - Loss:  1.145, Seconds: 3.20\n","Epoch  12/100 Batch 1480/1562 - Loss:  1.101, Seconds: 3.07\n","Epoch  12/100 Batch 1500/1562 - Loss:  1.113, Seconds: 2.95\n","Epoch  12/100 Batch 1520/1562 - Loss:  1.302, Seconds: 3.26\n","Epoch  12/100 Batch 1540/1562 - Loss:  1.170, Seconds: 3.02\n","Average loss for this update: 1.156\n","No Improvement.\n","Epoch  12/100 Batch 1560/1562 - Loss:  1.131, Seconds: 2.97\n","Epoch  13/100 Batch   20/1562 - Loss:  1.352, Seconds: 2.49\n","Epoch  13/100 Batch   40/1562 - Loss:  1.181, Seconds: 2.35\n","Epoch  13/100 Batch   60/1562 - Loss:  1.195, Seconds: 2.44\n","Epoch  13/100 Batch   80/1562 - Loss:  1.180, Seconds: 2.36\n","Epoch  13/100 Batch  100/1562 - Loss:  1.157, Seconds: 2.14\n","Epoch  13/100 Batch  120/1562 - Loss:  1.171, Seconds: 2.28\n","Epoch  13/100 Batch  140/1562 - Loss:  1.033, Seconds: 2.64\n","Epoch  13/100 Batch  160/1562 - Loss:  1.077, Seconds: 2.16\n","Epoch  13/100 Batch  180/1562 - Loss:  1.057, Seconds: 2.16\n","Epoch  13/100 Batch  200/1562 - Loss:  1.127, Seconds: 2.49\n","Epoch  13/100 Batch  220/1562 - Loss:  1.154, Seconds: 2.49\n","Epoch  13/100 Batch  240/1562 - Loss:  1.126, Seconds: 2.53\n","Epoch  13/100 Batch  260/1562 - Loss:  1.062, Seconds: 2.62\n","Epoch  13/100 Batch  280/1562 - Loss:  1.001, Seconds: 2.58\n","Epoch  13/100 Batch  300/1562 - Loss:  0.924, Seconds: 2.42\n","Epoch  13/100 Batch  320/1562 - Loss:  1.083, Seconds: 2.21\n","Epoch  13/100 Batch  340/1562 - Loss:  1.089, Seconds: 2.53\n","Epoch  13/100 Batch  360/1562 - Loss:  1.217, Seconds: 2.70\n","Epoch  13/100 Batch  380/1562 - Loss:  1.156, Seconds: 2.53\n","Epoch  13/100 Batch  400/1562 - Loss:  1.108, Seconds: 2.36\n","Epoch  13/100 Batch  420/1562 - Loss:  1.021, Seconds: 2.57\n","Epoch  13/100 Batch  440/1562 - Loss:  0.992, Seconds: 2.58\n","Epoch  13/100 Batch  460/1562 - Loss:  1.040, Seconds: 2.56\n","Epoch  13/100 Batch  480/1562 - Loss:  1.095, Seconds: 2.64\n","Epoch  13/100 Batch  500/1562 - Loss:  1.173, Seconds: 2.59\n","Average loss for this update: 1.109\n","New Record!\n","Epoch  13/100 Batch  520/1562 - Loss:  1.057, Seconds: 2.72\n","Epoch  13/100 Batch  540/1562 - Loss:  1.149, Seconds: 2.41\n","Epoch  13/100 Batch  560/1562 - Loss:  1.009, Seconds: 2.46\n","Epoch  13/100 Batch  580/1562 - Loss:  1.033, Seconds: 2.39\n","Epoch  13/100 Batch  600/1562 - Loss:  1.064, Seconds: 2.56\n","Epoch  13/100 Batch  620/1562 - Loss:  1.079, Seconds: 2.94\n","Epoch  13/100 Batch  640/1562 - Loss:  1.234, Seconds: 2.79\n","Epoch  13/100 Batch  660/1562 - Loss:  1.133, Seconds: 2.51\n","Epoch  13/100 Batch  680/1562 - Loss:  1.126, Seconds: 2.57\n","Epoch  13/100 Batch  700/1562 - Loss:  1.009, Seconds: 2.60\n","Epoch  13/100 Batch  720/1562 - Loss:  1.005, Seconds: 2.68\n","Epoch  13/100 Batch  740/1562 - Loss:  1.016, Seconds: 2.72\n","Epoch  13/100 Batch  760/1562 - Loss:  1.218, Seconds: 2.57\n","Epoch  13/100 Batch  780/1562 - Loss:  1.233, Seconds: 2.30\n","Epoch  13/100 Batch  800/1562 - Loss:  1.120, Seconds: 2.45\n","Epoch  13/100 Batch  820/1562 - Loss:  1.011, Seconds: 2.38\n","Epoch  13/100 Batch  840/1562 - Loss:  1.087, Seconds: 2.56\n","Epoch  13/100 Batch  860/1562 - Loss:  1.066, Seconds: 2.91\n","Epoch  13/100 Batch  880/1562 - Loss:  1.199, Seconds: 2.47\n","Epoch  13/100 Batch  900/1562 - Loss:  1.199, Seconds: 2.90\n","Epoch  13/100 Batch  920/1562 - Loss:  1.128, Seconds: 2.79\n","Epoch  13/100 Batch  940/1562 - Loss:  1.147, Seconds: 2.48\n","Epoch  13/100 Batch  960/1562 - Loss:  1.153, Seconds: 2.51\n","Epoch  13/100 Batch  980/1562 - Loss:  1.018, Seconds: 2.86\n","Epoch  13/100 Batch 1000/1562 - Loss:  1.226, Seconds: 2.73\n","Epoch  13/100 Batch 1020/1562 - Loss:  1.122, Seconds: 2.65\n","Average loss for this update: 1.11\n","No Improvement.\n","Epoch  13/100 Batch 1040/1562 - Loss:  1.104, Seconds: 2.98\n","Epoch  13/100 Batch 1060/1562 - Loss:  1.048, Seconds: 2.75\n","Epoch  13/100 Batch 1080/1562 - Loss:  1.049, Seconds: 2.66\n","Epoch  13/100 Batch 1100/1562 - Loss:  1.105, Seconds: 2.89\n","Epoch  13/100 Batch 1120/1562 - Loss:  1.244, Seconds: 2.90\n","Epoch  13/100 Batch 1140/1562 - Loss:  1.132, Seconds: 2.85\n","Epoch  13/100 Batch 1160/1562 - Loss:  1.043, Seconds: 2.64\n","Epoch  13/100 Batch 1180/1562 - Loss:  1.139, Seconds: 2.77\n","Epoch  13/100 Batch 1200/1562 - Loss:  1.094, Seconds: 2.69\n","Epoch  13/100 Batch 1220/1562 - Loss:  1.237, Seconds: 2.87\n","Epoch  13/100 Batch 1240/1562 - Loss:  1.169, Seconds: 2.81\n","Epoch  13/100 Batch 1260/1562 - Loss:  1.106, Seconds: 3.01\n","Epoch  13/100 Batch 1280/1562 - Loss:  1.116, Seconds: 2.63\n","Epoch  13/100 Batch 1300/1562 - Loss:  1.082, Seconds: 2.89\n","Epoch  13/100 Batch 1320/1562 - Loss:  1.234, Seconds: 3.02\n","Epoch  13/100 Batch 1340/1562 - Loss:  1.209, Seconds: 2.91\n","Epoch  13/100 Batch 1360/1562 - Loss:  1.137, Seconds: 2.98\n","Epoch  13/100 Batch 1380/1562 - Loss:  1.048, Seconds: 3.00\n","Epoch  13/100 Batch 1400/1562 - Loss:  1.091, Seconds: 3.20\n","Epoch  13/100 Batch 1420/1562 - Loss:  1.184, Seconds: 3.15\n","Epoch  13/100 Batch 1440/1562 - Loss:  1.181, Seconds: 3.25\n","Epoch  13/100 Batch 1460/1562 - Loss:  1.132, Seconds: 3.16\n","Epoch  13/100 Batch 1480/1562 - Loss:  1.103, Seconds: 3.33\n","Epoch  13/100 Batch 1500/1562 - Loss:  1.098, Seconds: 3.12\n","Epoch  13/100 Batch 1520/1562 - Loss:  1.284, Seconds: 3.40\n","Epoch  13/100 Batch 1540/1562 - Loss:  1.141, Seconds: 3.03\n","Average loss for this update: 1.136\n","No Improvement.\n","Epoch  13/100 Batch 1560/1562 - Loss:  1.120, Seconds: 3.12\n","Epoch  14/100 Batch   20/1562 - Loss:  1.348, Seconds: 2.71\n","Epoch  14/100 Batch   40/1562 - Loss:  1.174, Seconds: 2.59\n","Epoch  14/100 Batch   60/1562 - Loss:  1.168, Seconds: 2.39\n","Epoch  14/100 Batch   80/1562 - Loss:  1.148, Seconds: 2.28\n","Epoch  14/100 Batch  100/1562 - Loss:  1.142, Seconds: 2.15\n","Epoch  14/100 Batch  120/1562 - Loss:  1.129, Seconds: 2.50\n","Epoch  14/100 Batch  140/1562 - Loss:  1.015, Seconds: 2.53\n","Epoch  14/100 Batch  160/1562 - Loss:  1.061, Seconds: 2.16\n","Epoch  14/100 Batch  180/1562 - Loss:  1.035, Seconds: 2.30\n","Epoch  14/100 Batch  200/1562 - Loss:  1.098, Seconds: 2.53\n","Epoch  14/100 Batch  220/1562 - Loss:  1.131, Seconds: 2.50\n","Epoch  14/100 Batch  240/1562 - Loss:  1.107, Seconds: 2.45\n","Epoch  14/100 Batch  260/1562 - Loss:  1.049, Seconds: 2.59\n","Epoch  14/100 Batch  280/1562 - Loss:  0.985, Seconds: 2.40\n","Epoch  14/100 Batch  300/1562 - Loss:  0.918, Seconds: 2.33\n","Epoch  14/100 Batch  320/1562 - Loss:  1.057, Seconds: 2.21\n","Epoch  14/100 Batch  340/1562 - Loss:  1.061, Seconds: 2.54\n","Epoch  14/100 Batch  360/1562 - Loss:  1.195, Seconds: 2.80\n","Epoch  14/100 Batch  380/1562 - Loss:  1.134, Seconds: 2.55\n","Epoch  14/100 Batch  400/1562 - Loss:  1.091, Seconds: 2.35\n","Epoch  14/100 Batch  420/1562 - Loss:  1.005, Seconds: 2.63\n","Epoch  14/100 Batch  440/1562 - Loss:  0.981, Seconds: 2.59\n","Epoch  14/100 Batch  460/1562 - Loss:  1.022, Seconds: 2.45\n","Epoch  14/100 Batch  480/1562 - Loss:  1.079, Seconds: 2.61\n","Epoch  14/100 Batch  500/1562 - Loss:  1.146, Seconds: 2.48\n","Average loss for this update: 1.09\n","New Record!\n","Epoch  14/100 Batch  520/1562 - Loss:  1.037, Seconds: 2.72\n","Epoch  14/100 Batch  540/1562 - Loss:  1.122, Seconds: 2.52\n","Epoch  14/100 Batch  560/1562 - Loss:  0.994, Seconds: 2.32\n","Epoch  14/100 Batch  580/1562 - Loss:  1.013, Seconds: 2.47\n","Epoch  14/100 Batch  600/1562 - Loss:  1.037, Seconds: 3.89\n","Epoch  14/100 Batch  620/1562 - Loss:  1.065, Seconds: 2.29\n","Epoch  14/100 Batch  640/1562 - Loss:  1.213, Seconds: 2.60\n","Epoch  14/100 Batch  660/1562 - Loss:  1.121, Seconds: 2.55\n","Epoch  14/100 Batch  680/1562 - Loss:  1.112, Seconds: 2.45\n","Epoch  14/100 Batch  700/1562 - Loss:  0.992, Seconds: 2.69\n","Epoch  14/100 Batch  720/1562 - Loss:  0.996, Seconds: 2.64\n","Epoch  14/100 Batch  740/1562 - Loss:  1.010, Seconds: 2.74\n","Epoch  14/100 Batch  760/1562 - Loss:  1.200, Seconds: 2.78\n","Epoch  14/100 Batch  780/1562 - Loss:  1.211, Seconds: 2.75\n","Epoch  14/100 Batch  800/1562 - Loss:  1.113, Seconds: 2.43\n","Epoch  14/100 Batch  820/1562 - Loss:  1.001, Seconds: 2.53\n","Epoch  14/100 Batch  840/1562 - Loss:  1.072, Seconds: 2.46\n","Epoch  14/100 Batch  860/1562 - Loss:  1.044, Seconds: 2.74\n","Epoch  14/100 Batch  880/1562 - Loss:  1.166, Seconds: 2.63\n","Epoch  14/100 Batch  900/1562 - Loss:  1.166, Seconds: 2.75\n","Epoch  14/100 Batch  920/1562 - Loss:  1.113, Seconds: 2.67\n","Epoch  14/100 Batch  940/1562 - Loss:  1.122, Seconds: 2.44\n","Epoch  14/100 Batch  960/1562 - Loss:  1.123, Seconds: 2.62\n","Epoch  14/100 Batch  980/1562 - Loss:  1.006, Seconds: 2.81\n","Epoch  14/100 Batch 1000/1562 - Loss:  1.218, Seconds: 2.65\n","Epoch  14/100 Batch 1020/1562 - Loss:  1.088, Seconds: 2.71\n","Average loss for this update: 1.092\n","No Improvement.\n","Epoch  14/100 Batch 1040/1562 - Loss:  1.091, Seconds: 2.94\n","Epoch  14/100 Batch 1060/1562 - Loss:  1.029, Seconds: 2.87\n","Epoch  14/100 Batch 1080/1562 - Loss:  1.038, Seconds: 2.74\n","Epoch  14/100 Batch 1100/1562 - Loss:  1.098, Seconds: 3.02\n","Epoch  14/100 Batch 1120/1562 - Loss:  1.228, Seconds: 2.79\n","Epoch  14/100 Batch 1140/1562 - Loss:  1.105, Seconds: 2.79\n","Epoch  14/100 Batch 1160/1562 - Loss:  1.029, Seconds: 2.64\n","Epoch  14/100 Batch 1180/1562 - Loss:  1.124, Seconds: 2.79\n","Epoch  14/100 Batch 1200/1562 - Loss:  1.077, Seconds: 2.96\n","Epoch  14/100 Batch 1220/1562 - Loss:  1.221, Seconds: 2.88\n","Epoch  14/100 Batch 1240/1562 - Loss:  1.158, Seconds: 2.67\n","Epoch  14/100 Batch 1260/1562 - Loss:  1.082, Seconds: 2.86\n","Epoch  14/100 Batch 1280/1562 - Loss:  1.093, Seconds: 2.66\n","Epoch  14/100 Batch 1300/1562 - Loss:  1.058, Seconds: 3.23\n","Epoch  14/100 Batch 1320/1562 - Loss:  1.200, Seconds: 2.94\n","Epoch  14/100 Batch 1340/1562 - Loss:  1.175, Seconds: 3.00\n","Epoch  14/100 Batch 1360/1562 - Loss:  1.119, Seconds: 3.02\n","Epoch  14/100 Batch 1380/1562 - Loss:  1.036, Seconds: 2.78\n","Epoch  14/100 Batch 1400/1562 - Loss:  1.070, Seconds: 3.08\n","Epoch  14/100 Batch 1420/1562 - Loss:  1.149, Seconds: 2.93\n","Epoch  14/100 Batch 1440/1562 - Loss:  1.152, Seconds: 3.32\n","Epoch  14/100 Batch 1460/1562 - Loss:  1.108, Seconds: 3.06\n","Epoch  14/100 Batch 1480/1562 - Loss:  1.074, Seconds: 3.27\n","Epoch  14/100 Batch 1500/1562 - Loss:  1.084, Seconds: 3.04\n","Epoch  14/100 Batch 1520/1562 - Loss:  1.265, Seconds: 3.37\n","Epoch  14/100 Batch 1540/1562 - Loss:  1.130, Seconds: 2.91\n","Average loss for this update: 1.116\n","No Improvement.\n","Epoch  14/100 Batch 1560/1562 - Loss:  1.103, Seconds: 2.96\n","Epoch  15/100 Batch   20/1562 - Loss:  1.308, Seconds: 2.47\n","Epoch  15/100 Batch   40/1562 - Loss:  1.147, Seconds: 2.17\n","Epoch  15/100 Batch   60/1562 - Loss:  1.155, Seconds: 2.54\n","Epoch  15/100 Batch   80/1562 - Loss:  1.119, Seconds: 2.24\n","Epoch  15/100 Batch  100/1562 - Loss:  1.114, Seconds: 2.02\n","Epoch  15/100 Batch  120/1562 - Loss:  1.119, Seconds: 2.39\n","Epoch  15/100 Batch  140/1562 - Loss:  0.995, Seconds: 2.47\n","Epoch  15/100 Batch  160/1562 - Loss:  1.050, Seconds: 2.19\n","Epoch  15/100 Batch  180/1562 - Loss:  1.018, Seconds: 2.55\n","Epoch  15/100 Batch  200/1562 - Loss:  1.084, Seconds: 2.45\n","Epoch  15/100 Batch  220/1562 - Loss:  1.115, Seconds: 2.41\n","Epoch  15/100 Batch  240/1562 - Loss:  1.094, Seconds: 2.65\n","Epoch  15/100 Batch  260/1562 - Loss:  1.025, Seconds: 2.53\n","Epoch  15/100 Batch  280/1562 - Loss:  0.962, Seconds: 2.33\n","Epoch  15/100 Batch  300/1562 - Loss:  0.907, Seconds: 2.54\n","Epoch  15/100 Batch  320/1562 - Loss:  1.040, Seconds: 2.30\n","Epoch  15/100 Batch  340/1562 - Loss:  1.043, Seconds: 2.27\n","Epoch  15/100 Batch  360/1562 - Loss:  1.160, Seconds: 2.52\n","Epoch  15/100 Batch  380/1562 - Loss:  1.114, Seconds: 2.88\n","Epoch  15/100 Batch  400/1562 - Loss:  1.062, Seconds: 2.37\n","Epoch  15/100 Batch  420/1562 - Loss:  0.981, Seconds: 2.45\n","Epoch  15/100 Batch  440/1562 - Loss:  0.967, Seconds: 2.84\n","Epoch  15/100 Batch  460/1562 - Loss:  1.005, Seconds: 2.38\n","Epoch  15/100 Batch  480/1562 - Loss:  1.058, Seconds: 2.47\n","Epoch  15/100 Batch  500/1562 - Loss:  1.142, Seconds: 2.38\n","Average loss for this update: 1.07\n","New Record!\n","Epoch  15/100 Batch  520/1562 - Loss:  1.025, Seconds: 2.73\n","Epoch  15/100 Batch  540/1562 - Loss:  1.099, Seconds: 2.47\n","Epoch  15/100 Batch  560/1562 - Loss:  0.978, Seconds: 2.25\n","Epoch  15/100 Batch  580/1562 - Loss:  0.986, Seconds: 2.34\n","Epoch  15/100 Batch  600/1562 - Loss:  1.034, Seconds: 3.10\n","Epoch  15/100 Batch  620/1562 - Loss:  1.046, Seconds: 2.36\n","Epoch  15/100 Batch  640/1562 - Loss:  1.187, Seconds: 2.55\n","Epoch  15/100 Batch  660/1562 - Loss:  1.093, Seconds: 2.35\n","Epoch  15/100 Batch  680/1562 - Loss:  1.087, Seconds: 2.47\n","Epoch  15/100 Batch  700/1562 - Loss:  0.973, Seconds: 2.65\n","Epoch  15/100 Batch  720/1562 - Loss:  0.969, Seconds: 2.65\n","Epoch  15/100 Batch  740/1562 - Loss:  0.994, Seconds: 2.88\n","Epoch  15/100 Batch  760/1562 - Loss:  1.176, Seconds: 2.57\n","Epoch  15/100 Batch  780/1562 - Loss:  1.193, Seconds: 2.35\n","Epoch  15/100 Batch  800/1562 - Loss:  1.081, Seconds: 2.35\n","Epoch  15/100 Batch  820/1562 - Loss:  0.988, Seconds: 2.47\n","Epoch  15/100 Batch  840/1562 - Loss:  1.046, Seconds: 2.36\n","Epoch  15/100 Batch  860/1562 - Loss:  1.031, Seconds: 2.77\n","Epoch  15/100 Batch  880/1562 - Loss:  1.140, Seconds: 2.52\n","Epoch  15/100 Batch  900/1562 - Loss:  1.154, Seconds: 2.59\n","Epoch  15/100 Batch  920/1562 - Loss:  1.094, Seconds: 2.73\n","Epoch  15/100 Batch  940/1562 - Loss:  1.101, Seconds: 2.47\n","Epoch  15/100 Batch  960/1562 - Loss:  1.115, Seconds: 2.56\n","Epoch  15/100 Batch  980/1562 - Loss:  0.980, Seconds: 2.67\n","Epoch  15/100 Batch 1000/1562 - Loss:  1.224, Seconds: 2.84\n","Epoch  15/100 Batch 1020/1562 - Loss:  1.104, Seconds: 2.65\n","Average loss for this update: 1.075\n","No Improvement.\n","Epoch  15/100 Batch 1040/1562 - Loss:  1.097, Seconds: 3.03\n","Epoch  15/100 Batch 1060/1562 - Loss:  1.031, Seconds: 2.67\n","Epoch  15/100 Batch 1080/1562 - Loss:  1.042, Seconds: 2.66\n","Epoch  15/100 Batch 1100/1562 - Loss:  1.091, Seconds: 2.99\n","Epoch  15/100 Batch 1120/1562 - Loss:  1.205, Seconds: 2.88\n","Epoch  15/100 Batch 1140/1562 - Loss:  1.087, Seconds: 2.81\n","Epoch  15/100 Batch 1160/1562 - Loss:  1.026, Seconds: 2.57\n","Epoch  15/100 Batch 1180/1562 - Loss:  1.102, Seconds: 2.68\n","Epoch  15/100 Batch 1200/1562 - Loss:  1.083, Seconds: 2.71\n","Epoch  15/100 Batch 1220/1562 - Loss:  1.209, Seconds: 2.89\n","Epoch  15/100 Batch 1240/1562 - Loss:  1.145, Seconds: 2.89\n","Epoch  15/100 Batch 1260/1562 - Loss:  1.072, Seconds: 2.87\n","Epoch  15/100 Batch 1280/1562 - Loss:  1.088, Seconds: 2.67\n","Epoch  15/100 Batch 1300/1562 - Loss:  1.048, Seconds: 2.66\n","Epoch  15/100 Batch 1320/1562 - Loss:  1.193, Seconds: 2.91\n","Epoch  15/100 Batch 1340/1562 - Loss:  1.166, Seconds: 3.02\n","Epoch  15/100 Batch 1360/1562 - Loss:  1.098, Seconds: 3.20\n","Epoch  15/100 Batch 1380/1562 - Loss:  1.012, Seconds: 2.70\n","Epoch  15/100 Batch 1400/1562 - Loss:  1.046, Seconds: 3.07\n","Epoch  15/100 Batch 1420/1562 - Loss:  1.141, Seconds: 2.91\n","Epoch  15/100 Batch 1440/1562 - Loss:  1.130, Seconds: 3.07\n","Epoch  15/100 Batch 1460/1562 - Loss:  1.097, Seconds: 3.02\n","Epoch  15/100 Batch 1480/1562 - Loss:  1.055, Seconds: 3.12\n","Epoch  15/100 Batch 1500/1562 - Loss:  1.055, Seconds: 2.84\n","Epoch  15/100 Batch 1520/1562 - Loss:  1.241, Seconds: 3.08\n","Epoch  15/100 Batch 1540/1562 - Loss:  1.116, Seconds: 2.95\n","Average loss for this update: 1.103\n","No Improvement.\n","Epoch  15/100 Batch 1560/1562 - Loss:  1.095, Seconds: 3.02\n","Epoch  16/100 Batch   20/1562 - Loss:  1.301, Seconds: 2.46\n","Epoch  16/100 Batch   40/1562 - Loss:  1.126, Seconds: 2.14\n","Epoch  16/100 Batch   60/1562 - Loss:  1.137, Seconds: 2.29\n","Epoch  16/100 Batch   80/1562 - Loss:  1.112, Seconds: 2.26\n","Epoch  16/100 Batch  100/1562 - Loss:  1.089, Seconds: 2.29\n","Epoch  16/100 Batch  120/1562 - Loss:  1.110, Seconds: 2.45\n","Epoch  16/100 Batch  140/1562 - Loss:  0.991, Seconds: 2.58\n","Epoch  16/100 Batch  160/1562 - Loss:  1.030, Seconds: 2.09\n","Epoch  16/100 Batch  180/1562 - Loss:  1.000, Seconds: 2.25\n","Epoch  16/100 Batch  200/1562 - Loss:  1.071, Seconds: 2.43\n","Epoch  16/100 Batch  220/1562 - Loss:  1.089, Seconds: 2.46\n","Epoch  16/100 Batch  240/1562 - Loss:  1.078, Seconds: 2.58\n","Epoch  16/100 Batch  260/1562 - Loss:  1.015, Seconds: 2.53\n","Epoch  16/100 Batch  280/1562 - Loss:  0.988, Seconds: 2.47\n","Epoch  16/100 Batch  300/1562 - Loss:  0.926, Seconds: 2.34\n","Epoch  16/100 Batch  320/1562 - Loss:  1.036, Seconds: 2.33\n","Epoch  16/100 Batch  340/1562 - Loss:  1.048, Seconds: 2.41\n","Epoch  16/100 Batch  360/1562 - Loss:  1.172, Seconds: 2.67\n","Epoch  16/100 Batch  380/1562 - Loss:  1.113, Seconds: 2.55\n","Epoch  16/100 Batch  400/1562 - Loss:  1.059, Seconds: 2.32\n","Epoch  16/100 Batch  420/1562 - Loss:  0.984, Seconds: 2.52\n","Epoch  16/100 Batch  440/1562 - Loss:  0.967, Seconds: 2.64\n","Epoch  16/100 Batch  460/1562 - Loss:  1.015, Seconds: 2.49\n","Epoch  16/100 Batch  480/1562 - Loss:  1.044, Seconds: 2.55\n","Epoch  16/100 Batch  500/1562 - Loss:  1.124, Seconds: 2.43\n","Average loss for this update: 1.063\n","New Record!\n","Epoch  16/100 Batch  520/1562 - Loss:  1.015, Seconds: 3.12\n","Epoch  16/100 Batch  540/1562 - Loss:  1.081, Seconds: 2.37\n","Epoch  16/100 Batch  560/1562 - Loss:  0.969, Seconds: 2.25\n","Epoch  16/100 Batch  580/1562 - Loss:  0.977, Seconds: 2.35\n","Epoch  16/100 Batch  600/1562 - Loss:  1.017, Seconds: 3.72\n","Epoch  16/100 Batch  620/1562 - Loss:  1.029, Seconds: 2.28\n","Epoch  16/100 Batch  640/1562 - Loss:  1.175, Seconds: 2.82\n","Epoch  16/100 Batch  660/1562 - Loss:  1.071, Seconds: 2.37\n","Epoch  16/100 Batch  680/1562 - Loss:  1.093, Seconds: 2.66\n","Epoch  16/100 Batch  700/1562 - Loss:  0.973, Seconds: 2.67\n","Epoch  16/100 Batch  720/1562 - Loss:  0.994, Seconds: 2.70\n","Epoch  16/100 Batch  740/1562 - Loss:  1.006, Seconds: 2.69\n","Epoch  16/100 Batch  760/1562 - Loss:  1.184, Seconds: 2.84\n","Epoch  16/100 Batch  780/1562 - Loss:  1.176, Seconds: 2.22\n","Epoch  16/100 Batch  800/1562 - Loss:  1.080, Seconds: 2.35\n","Epoch  16/100 Batch  820/1562 - Loss:  0.980, Seconds: 2.50\n","Epoch  16/100 Batch  840/1562 - Loss:  1.037, Seconds: 2.44\n","Epoch  16/100 Batch  860/1562 - Loss:  1.022, Seconds: 2.91\n","Epoch  16/100 Batch  880/1562 - Loss:  1.137, Seconds: 2.50\n","Epoch  16/100 Batch  900/1562 - Loss:  1.141, Seconds: 2.91\n","Epoch  16/100 Batch  920/1562 - Loss:  1.070, Seconds: 2.68\n","Epoch  16/100 Batch  940/1562 - Loss:  1.099, Seconds: 2.46\n","Epoch  16/100 Batch  960/1562 - Loss:  1.104, Seconds: 2.48\n","Epoch  16/100 Batch  980/1562 - Loss:  0.980, Seconds: 2.63\n","Epoch  16/100 Batch 1000/1562 - Loss:  1.180, Seconds: 2.73\n","Epoch  16/100 Batch 1020/1562 - Loss:  1.054, Seconds: 2.66\n","Average loss for this update: 1.065\n","No Improvement.\n","Epoch  16/100 Batch 1040/1562 - Loss:  1.066, Seconds: 2.89\n","Epoch  16/100 Batch 1060/1562 - Loss:  0.989, Seconds: 2.73\n","Epoch  16/100 Batch 1080/1562 - Loss:  1.006, Seconds: 2.79\n","Epoch  16/100 Batch 1100/1562 - Loss:  1.055, Seconds: 2.88\n","Epoch  16/100 Batch 1120/1562 - Loss:  1.176, Seconds: 2.76\n","Epoch  16/100 Batch 1140/1562 - Loss:  1.069, Seconds: 2.79\n","Epoch  16/100 Batch 1160/1562 - Loss:  0.993, Seconds: 2.95\n","Epoch  16/100 Batch 1180/1562 - Loss:  1.088, Seconds: 2.62\n","Epoch  16/100 Batch 1200/1562 - Loss:  1.053, Seconds: 2.82\n","Epoch  16/100 Batch 1220/1562 - Loss:  1.176, Seconds: 2.91\n","Epoch  16/100 Batch 1240/1562 - Loss:  1.131, Seconds: 2.70\n","Epoch  16/100 Batch 1260/1562 - Loss:  1.051, Seconds: 2.79\n","Epoch  16/100 Batch 1280/1562 - Loss:  1.066, Seconds: 2.64\n","Epoch  16/100 Batch 1300/1562 - Loss:  1.037, Seconds: 2.59\n","Epoch  16/100 Batch 1320/1562 - Loss:  1.172, Seconds: 2.91\n","Epoch  16/100 Batch 1340/1562 - Loss:  1.140, Seconds: 3.12\n","Epoch  16/100 Batch 1360/1562 - Loss:  1.089, Seconds: 3.21\n","Epoch  16/100 Batch 1380/1562 - Loss:  1.000, Seconds: 2.79\n","Epoch  16/100 Batch 1400/1562 - Loss:  1.033, Seconds: 3.10\n","Epoch  16/100 Batch 1420/1562 - Loss:  1.115, Seconds: 2.99\n","Epoch  16/100 Batch 1440/1562 - Loss:  1.123, Seconds: 2.95\n","Epoch  16/100 Batch 1460/1562 - Loss:  1.078, Seconds: 2.99\n","Epoch  16/100 Batch 1480/1562 - Loss:  1.040, Seconds: 2.85\n","Epoch  16/100 Batch 1500/1562 - Loss:  1.059, Seconds: 2.86\n","Epoch  16/100 Batch 1520/1562 - Loss:  1.225, Seconds: 3.00\n","Epoch  16/100 Batch 1540/1562 - Loss:  1.089, Seconds: 2.94\n","Average loss for this update: 1.082\n","No Improvement.\n","Epoch  16/100 Batch 1560/1562 - Loss:  1.063, Seconds: 2.95\n","Epoch  17/100 Batch   20/1562 - Loss:  1.263, Seconds: 2.39\n","Epoch  17/100 Batch   40/1562 - Loss:  1.114, Seconds: 2.18\n","Epoch  17/100 Batch   60/1562 - Loss:  1.120, Seconds: 2.27\n","Epoch  17/100 Batch   80/1562 - Loss:  1.077, Seconds: 2.24\n","Epoch  17/100 Batch  100/1562 - Loss:  1.078, Seconds: 2.27\n","Epoch  17/100 Batch  120/1562 - Loss:  1.079, Seconds: 2.30\n","Epoch  17/100 Batch  140/1562 - Loss:  0.958, Seconds: 2.43\n","Epoch  17/100 Batch  160/1562 - Loss:  1.009, Seconds: 2.40\n","Epoch  17/100 Batch  180/1562 - Loss:  0.993, Seconds: 2.22\n","Epoch  17/100 Batch  200/1562 - Loss:  1.055, Seconds: 2.40\n","Epoch  17/100 Batch  220/1562 - Loss:  1.062, Seconds: 2.47\n","Epoch  17/100 Batch  240/1562 - Loss:  1.044, Seconds: 2.54\n","Epoch  17/100 Batch  260/1562 - Loss:  1.019, Seconds: 2.51\n","Epoch  17/100 Batch  280/1562 - Loss:  0.963, Seconds: 2.60\n","Epoch  17/100 Batch  300/1562 - Loss:  0.912, Seconds: 2.38\n","Epoch  17/100 Batch  320/1562 - Loss:  1.034, Seconds: 2.17\n","Epoch  17/100 Batch  340/1562 - Loss:  1.028, Seconds: 2.43\n","Epoch  17/100 Batch  360/1562 - Loss:  1.160, Seconds: 2.62\n","Epoch  17/100 Batch  380/1562 - Loss:  1.088, Seconds: 2.58\n","Epoch  17/100 Batch  400/1562 - Loss:  1.048, Seconds: 2.33\n","Epoch  17/100 Batch  420/1562 - Loss:  0.974, Seconds: 2.61\n","Epoch  17/100 Batch  440/1562 - Loss:  0.945, Seconds: 2.58\n","Epoch  17/100 Batch  460/1562 - Loss:  0.991, Seconds: 2.39\n","Epoch  17/100 Batch  480/1562 - Loss:  1.044, Seconds: 2.54\n","Epoch  17/100 Batch  500/1562 - Loss:  1.114, Seconds: 2.45\n","Average loss for this update: 1.045\n","New Record!\n","Epoch  17/100 Batch  520/1562 - Loss:  0.995, Seconds: 2.80\n","Epoch  17/100 Batch  540/1562 - Loss:  1.087, Seconds: 2.41\n","Epoch  17/100 Batch  560/1562 - Loss:  0.948, Seconds: 2.36\n","Epoch  17/100 Batch  580/1562 - Loss:  0.964, Seconds: 2.49\n","Epoch  17/100 Batch  600/1562 - Loss:  1.000, Seconds: 4.37\n","Epoch  17/100 Batch  620/1562 - Loss:  1.015, Seconds: 2.32\n","Epoch  17/100 Batch  640/1562 - Loss:  1.154, Seconds: 2.60\n","Epoch  17/100 Batch  660/1562 - Loss:  1.052, Seconds: 2.68\n","Epoch  17/100 Batch  680/1562 - Loss:  1.051, Seconds: 2.69\n","Epoch  17/100 Batch  700/1562 - Loss:  0.939, Seconds: 2.75\n","Epoch  17/100 Batch  720/1562 - Loss:  0.947, Seconds: 2.75\n","Epoch  17/100 Batch  740/1562 - Loss:  0.961, Seconds: 2.89\n","Epoch  17/100 Batch  760/1562 - Loss:  1.137, Seconds: 2.55\n","Epoch  17/100 Batch  780/1562 - Loss:  1.143, Seconds: 2.17\n","Epoch  17/100 Batch  800/1562 - Loss:  1.058, Seconds: 2.32\n","Epoch  17/100 Batch  820/1562 - Loss:  0.941, Seconds: 2.36\n","Epoch  17/100 Batch  840/1562 - Loss:  1.021, Seconds: 2.40\n","Epoch  17/100 Batch  860/1562 - Loss:  1.012, Seconds: 2.74\n","Epoch  17/100 Batch  880/1562 - Loss:  1.121, Seconds: 2.64\n","Epoch  17/100 Batch  900/1562 - Loss:  1.124, Seconds: 2.70\n","Epoch  17/100 Batch  920/1562 - Loss:  1.060, Seconds: 2.69\n","Epoch  17/100 Batch  940/1562 - Loss:  1.079, Seconds: 2.34\n","Epoch  17/100 Batch  960/1562 - Loss:  1.091, Seconds: 2.56\n","Epoch  17/100 Batch  980/1562 - Loss:  0.965, Seconds: 2.67\n","Epoch  17/100 Batch 1000/1562 - Loss:  1.149, Seconds: 2.69\n","Epoch  17/100 Batch 1020/1562 - Loss:  1.032, Seconds: 2.65\n","Average loss for this update: 1.042\n","New Record!\n","Epoch  17/100 Batch 1040/1562 - Loss:  1.047, Seconds: 2.88\n","Epoch  17/100 Batch 1060/1562 - Loss:  0.961, Seconds: 2.72\n","Epoch  17/100 Batch 1080/1562 - Loss:  0.978, Seconds: 2.75\n","Epoch  17/100 Batch 1100/1562 - Loss:  1.046, Seconds: 3.75\n","Epoch  17/100 Batch 1120/1562 - Loss:  1.157, Seconds: 3.56\n","Epoch  17/100 Batch 1140/1562 - Loss:  1.062, Seconds: 2.78\n","Epoch  17/100 Batch 1160/1562 - Loss:  0.976, Seconds: 2.56\n","Epoch  17/100 Batch 1180/1562 - Loss:  1.073, Seconds: 2.71\n","Epoch  17/100 Batch 1200/1562 - Loss:  1.038, Seconds: 2.63\n","Epoch  17/100 Batch 1220/1562 - Loss:  1.166, Seconds: 2.83\n","Epoch  17/100 Batch 1240/1562 - Loss:  1.098, Seconds: 2.87\n","Epoch  17/100 Batch 1260/1562 - Loss:  1.028, Seconds: 3.15\n","Epoch  17/100 Batch 1280/1562 - Loss:  1.054, Seconds: 2.72\n","Epoch  17/100 Batch 1300/1562 - Loss:  1.015, Seconds: 2.67\n","Epoch  17/100 Batch 1320/1562 - Loss:  1.140, Seconds: 3.01\n","Epoch  17/100 Batch 1340/1562 - Loss:  1.128, Seconds: 3.07\n","Epoch  17/100 Batch 1360/1562 - Loss:  1.056, Seconds: 2.98\n","Epoch  17/100 Batch 1380/1562 - Loss:  0.977, Seconds: 2.97\n","Epoch  17/100 Batch 1400/1562 - Loss:  1.014, Seconds: 3.00\n","Epoch  17/100 Batch 1420/1562 - Loss:  1.101, Seconds: 2.91\n","Epoch  17/100 Batch 1440/1562 - Loss:  1.092, Seconds: 3.05\n","Epoch  17/100 Batch 1460/1562 - Loss:  1.063, Seconds: 3.01\n","Epoch  17/100 Batch 1480/1562 - Loss:  1.022, Seconds: 2.93\n","Epoch  17/100 Batch 1500/1562 - Loss:  1.024, Seconds: 2.91\n","Epoch  17/100 Batch 1520/1562 - Loss:  1.201, Seconds: 3.23\n","Epoch  17/100 Batch 1540/1562 - Loss:  1.072, Seconds: 2.94\n","Average loss for this update: 1.062\n","No Improvement.\n","Epoch  17/100 Batch 1560/1562 - Loss:  1.047, Seconds: 2.97\n","Epoch  18/100 Batch   20/1562 - Loss:  1.246, Seconds: 2.57\n","Epoch  18/100 Batch   40/1562 - Loss:  1.086, Seconds: 2.27\n","Epoch  18/100 Batch   60/1562 - Loss:  1.103, Seconds: 2.38\n","Epoch  18/100 Batch   80/1562 - Loss:  1.063, Seconds: 2.34\n","Epoch  18/100 Batch  100/1562 - Loss:  1.056, Seconds: 2.11\n","Epoch  18/100 Batch  120/1562 - Loss:  1.063, Seconds: 2.32\n","Epoch  18/100 Batch  140/1562 - Loss:  0.944, Seconds: 2.54\n","Epoch  18/100 Batch  160/1562 - Loss:  1.005, Seconds: 2.32\n","Epoch  18/100 Batch  180/1562 - Loss:  0.987, Seconds: 2.31\n","Epoch  18/100 Batch  200/1562 - Loss:  1.050, Seconds: 2.50\n","Epoch  18/100 Batch  220/1562 - Loss:  1.061, Seconds: 2.61\n","Epoch  18/100 Batch  240/1562 - Loss:  1.036, Seconds: 2.45\n","Epoch  18/100 Batch  260/1562 - Loss:  0.986, Seconds: 2.58\n","Epoch  18/100 Batch  280/1562 - Loss:  0.946, Seconds: 2.45\n","Epoch  18/100 Batch  300/1562 - Loss:  0.875, Seconds: 2.47\n","Epoch  18/100 Batch  320/1562 - Loss:  1.024, Seconds: 2.12\n","Epoch  18/100 Batch  340/1562 - Loss:  1.005, Seconds: 2.34\n","Epoch  18/100 Batch  360/1562 - Loss:  1.132, Seconds: 2.62\n","Epoch  18/100 Batch  380/1562 - Loss:  1.066, Seconds: 2.60\n","Epoch  18/100 Batch  400/1562 - Loss:  1.027, Seconds: 2.29\n","Epoch  18/100 Batch  420/1562 - Loss:  0.947, Seconds: 2.50\n","Epoch  18/100 Batch  440/1562 - Loss:  0.927, Seconds: 2.51\n","Epoch  18/100 Batch  460/1562 - Loss:  0.966, Seconds: 2.42\n","Epoch  18/100 Batch  480/1562 - Loss:  1.016, Seconds: 2.88\n","Epoch  18/100 Batch  500/1562 - Loss:  1.097, Seconds: 2.33\n","Average loss for this update: 1.027\n","New Record!\n","Epoch  18/100 Batch  520/1562 - Loss:  0.983, Seconds: 2.80\n","Epoch  18/100 Batch  540/1562 - Loss:  1.073, Seconds: 2.35\n","Epoch  18/100 Batch  560/1562 - Loss:  0.945, Seconds: 2.23\n","Epoch  18/100 Batch  580/1562 - Loss:  0.946, Seconds: 2.74\n","Epoch  18/100 Batch  600/1562 - Loss:  0.994, Seconds: 3.14\n","Epoch  18/100 Batch  620/1562 - Loss:  0.993, Seconds: 2.42\n","Epoch  18/100 Batch  640/1562 - Loss:  1.118, Seconds: 2.60\n","Epoch  18/100 Batch  660/1562 - Loss:  1.040, Seconds: 2.48\n","Epoch  18/100 Batch  680/1562 - Loss:  1.043, Seconds: 2.32\n","Epoch  18/100 Batch  700/1562 - Loss:  0.923, Seconds: 2.75\n","Epoch  18/100 Batch  720/1562 - Loss:  0.931, Seconds: 2.64\n","Epoch  18/100 Batch  740/1562 - Loss:  0.942, Seconds: 2.74\n","Epoch  18/100 Batch  760/1562 - Loss:  1.136, Seconds: 2.60\n","Epoch  18/100 Batch  780/1562 - Loss:  1.119, Seconds: 2.22\n","Epoch  18/100 Batch  800/1562 - Loss:  1.055, Seconds: 2.27\n","Epoch  18/100 Batch  820/1562 - Loss:  0.939, Seconds: 2.56\n","Epoch  18/100 Batch  840/1562 - Loss:  0.999, Seconds: 2.40\n","Epoch  18/100 Batch  860/1562 - Loss:  0.994, Seconds: 2.91\n","Epoch  18/100 Batch  880/1562 - Loss:  1.105, Seconds: 2.57\n","Epoch  18/100 Batch  900/1562 - Loss:  1.115, Seconds: 2.74\n","Epoch  18/100 Batch  920/1562 - Loss:  1.050, Seconds: 2.72\n","Epoch  18/100 Batch  940/1562 - Loss:  1.070, Seconds: 2.39\n","Epoch  18/100 Batch  960/1562 - Loss:  1.070, Seconds: 2.70\n","Epoch  18/100 Batch  980/1562 - Loss:  0.961, Seconds: 2.69\n","Epoch  18/100 Batch 1000/1562 - Loss:  1.162, Seconds: 2.73\n","Epoch  18/100 Batch 1020/1562 - Loss:  1.036, Seconds: 2.98\n","Average loss for this update: 1.03\n","No Improvement.\n","Epoch  18/100 Batch 1040/1562 - Loss:  1.032, Seconds: 2.90\n","Epoch  18/100 Batch 1060/1562 - Loss:  0.980, Seconds: 2.70\n","Epoch  18/100 Batch 1080/1562 - Loss:  0.979, Seconds: 2.92\n","Epoch  18/100 Batch 1100/1562 - Loss:  1.031, Seconds: 2.85\n","Epoch  18/100 Batch 1120/1562 - Loss:  1.151, Seconds: 2.83\n","Epoch  18/100 Batch 1140/1562 - Loss:  1.039, Seconds: 2.74\n","Epoch  18/100 Batch 1160/1562 - Loss:  0.965, Seconds: 2.76\n","Epoch  18/100 Batch 1180/1562 - Loss:  1.058, Seconds: 2.68\n","Epoch  18/100 Batch 1200/1562 - Loss:  1.026, Seconds: 2.86\n","Epoch  18/100 Batch 1220/1562 - Loss:  1.129, Seconds: 2.86\n","Epoch  18/100 Batch 1240/1562 - Loss:  1.088, Seconds: 2.92\n","Epoch  18/100 Batch 1260/1562 - Loss:  1.020, Seconds: 2.85\n","Epoch  18/100 Batch 1280/1562 - Loss:  1.030, Seconds: 2.67\n","Epoch  18/100 Batch 1300/1562 - Loss:  0.998, Seconds: 2.60\n","Epoch  18/100 Batch 1320/1562 - Loss:  1.139, Seconds: 2.96\n","Epoch  18/100 Batch 1340/1562 - Loss:  1.106, Seconds: 3.00\n","Epoch  18/100 Batch 1360/1562 - Loss:  1.043, Seconds: 3.02\n","Epoch  18/100 Batch 1380/1562 - Loss:  0.971, Seconds: 2.90\n","Epoch  18/100 Batch 1400/1562 - Loss:  1.006, Seconds: 3.10\n","Epoch  18/100 Batch 1420/1562 - Loss:  1.088, Seconds: 3.00\n","Epoch  18/100 Batch 1440/1562 - Loss:  1.076, Seconds: 2.96\n","Epoch  18/100 Batch 1460/1562 - Loss:  1.052, Seconds: 2.99\n","Epoch  18/100 Batch 1480/1562 - Loss:  1.004, Seconds: 2.96\n","Epoch  18/100 Batch 1500/1562 - Loss:  1.015, Seconds: 2.80\n","Epoch  18/100 Batch 1520/1562 - Loss:  1.170, Seconds: 3.05\n","Epoch  18/100 Batch 1540/1562 - Loss:  1.055, Seconds: 2.79\n","Average loss for this update: 1.049\n","No Improvement.\n","Epoch  18/100 Batch 1560/1562 - Loss:  1.043, Seconds: 2.93\n","Epoch  19/100 Batch   20/1562 - Loss:  1.230, Seconds: 2.46\n","Epoch  19/100 Batch   40/1562 - Loss:  1.086, Seconds: 2.20\n","Epoch  19/100 Batch   60/1562 - Loss:  1.089, Seconds: 2.28\n","Epoch  19/100 Batch   80/1562 - Loss:  1.055, Seconds: 2.33\n","Epoch  19/100 Batch  100/1562 - Loss:  1.045, Seconds: 2.15\n","Epoch  19/100 Batch  120/1562 - Loss:  1.053, Seconds: 2.52\n","Epoch  19/100 Batch  140/1562 - Loss:  0.935, Seconds: 2.49\n","Epoch  19/100 Batch  160/1562 - Loss:  0.977, Seconds: 2.12\n","Epoch  19/100 Batch  180/1562 - Loss:  0.960, Seconds: 2.27\n","Epoch  19/100 Batch  200/1562 - Loss:  1.010, Seconds: 2.58\n","Epoch  19/100 Batch  220/1562 - Loss:  1.038, Seconds: 2.45\n","Epoch  19/100 Batch  240/1562 - Loss:  1.014, Seconds: 2.52\n","Epoch  19/100 Batch  260/1562 - Loss:  0.969, Seconds: 2.68\n","Epoch  19/100 Batch  280/1562 - Loss:  0.916, Seconds: 2.38\n","Epoch  19/100 Batch  300/1562 - Loss:  0.854, Seconds: 2.36\n","Epoch  19/100 Batch  320/1562 - Loss:  0.980, Seconds: 2.35\n","Epoch  19/100 Batch  340/1562 - Loss:  0.980, Seconds: 2.33\n","Epoch  19/100 Batch  360/1562 - Loss:  1.108, Seconds: 2.56\n","Epoch  19/100 Batch  380/1562 - Loss:  1.040, Seconds: 2.51\n","Epoch  19/100 Batch  400/1562 - Loss:  1.007, Seconds: 2.57\n","Epoch  19/100 Batch  420/1562 - Loss:  0.928, Seconds: 2.69\n","Epoch  19/100 Batch  440/1562 - Loss:  0.907, Seconds: 2.61\n","Epoch  19/100 Batch  460/1562 - Loss:  0.961, Seconds: 2.33\n","Epoch  19/100 Batch  480/1562 - Loss:  1.004, Seconds: 2.62\n","Epoch  19/100 Batch  500/1562 - Loss:  1.066, Seconds: 2.45\n","Average loss for this update: 1.007\n","New Record!\n","Epoch  19/100 Batch  520/1562 - Loss:  0.953, Seconds: 3.08\n","Epoch  19/100 Batch  540/1562 - Loss:  1.052, Seconds: 2.46\n","Epoch  19/100 Batch  560/1562 - Loss:  0.916, Seconds: 2.67\n","Epoch  19/100 Batch  580/1562 - Loss:  0.938, Seconds: 2.32\n","Epoch  19/100 Batch  600/1562 - Loss:  0.971, Seconds: 3.06\n","Epoch  19/100 Batch  620/1562 - Loss:  0.992, Seconds: 2.87\n","Epoch  19/100 Batch  640/1562 - Loss:  1.111, Seconds: 2.67\n","Epoch  19/100 Batch  660/1562 - Loss:  1.025, Seconds: 2.56\n","Epoch  19/100 Batch  680/1562 - Loss:  1.027, Seconds: 2.67\n","Epoch  19/100 Batch  700/1562 - Loss:  0.912, Seconds: 2.60\n","Epoch  19/100 Batch  720/1562 - Loss:  0.927, Seconds: 2.79\n","Epoch  19/100 Batch  740/1562 - Loss:  0.944, Seconds: 2.69\n","Epoch  19/100 Batch  760/1562 - Loss:  1.113, Seconds: 2.53\n","Epoch  19/100 Batch  780/1562 - Loss:  1.119, Seconds: 2.28\n","Epoch  19/100 Batch  800/1562 - Loss:  1.029, Seconds: 2.43\n","Epoch  19/100 Batch  820/1562 - Loss:  0.939, Seconds: 2.39\n","Epoch  19/100 Batch  840/1562 - Loss:  0.997, Seconds: 2.44\n","Epoch  19/100 Batch  860/1562 - Loss:  0.976, Seconds: 2.75\n","Epoch  19/100 Batch  880/1562 - Loss:  1.079, Seconds: 2.43\n","Epoch  19/100 Batch  900/1562 - Loss:  1.094, Seconds: 2.84\n","Epoch  19/100 Batch  920/1562 - Loss:  1.027, Seconds: 2.60\n","Epoch  19/100 Batch  940/1562 - Loss:  1.046, Seconds: 2.41\n","Epoch  19/100 Batch  960/1562 - Loss:  1.056, Seconds: 2.52\n","Epoch  19/100 Batch  980/1562 - Loss:  0.934, Seconds: 2.69\n","Epoch  19/100 Batch 1000/1562 - Loss:  1.119, Seconds: 2.72\n","Epoch  19/100 Batch 1020/1562 - Loss:  1.015, Seconds: 2.81\n","Average loss for this update: 1.014\n","No Improvement.\n","Epoch  19/100 Batch 1040/1562 - Loss:  1.022, Seconds: 2.93\n","Epoch  19/100 Batch 1060/1562 - Loss:  0.956, Seconds: 2.65\n","Epoch  19/100 Batch 1080/1562 - Loss:  0.966, Seconds: 2.68\n","Epoch  19/100 Batch 1100/1562 - Loss:  1.009, Seconds: 2.86\n","Epoch  19/100 Batch 1120/1562 - Loss:  1.148, Seconds: 3.08\n","Epoch  19/100 Batch 1140/1562 - Loss:  1.091, Seconds: 3.05\n","Epoch  19/100 Batch 1160/1562 - Loss:  1.105, Seconds: 2.52\n","Epoch  19/100 Batch 1180/1562 - Loss:  1.165, Seconds: 2.75\n","Epoch  19/100 Batch 1200/1562 - Loss:  1.090, Seconds: 2.57\n","Epoch  19/100 Batch 1220/1562 - Loss:  1.214, Seconds: 2.91\n","Epoch  19/100 Batch 1240/1562 - Loss:  1.143, Seconds: 2.70\n","Epoch  19/100 Batch 1260/1562 - Loss:  1.078, Seconds: 2.82\n","Epoch  19/100 Batch 1280/1562 - Loss:  1.074, Seconds: 2.78\n","Epoch  19/100 Batch 1300/1562 - Loss:  1.036, Seconds: 2.70\n","Epoch  19/100 Batch 1320/1562 - Loss:  1.199, Seconds: 2.99\n","Epoch  19/100 Batch 1340/1562 - Loss:  1.153, Seconds: 3.22\n","Epoch  19/100 Batch 1360/1562 - Loss:  1.089, Seconds: 2.96\n","Epoch  19/100 Batch 1380/1562 - Loss:  1.009, Seconds: 2.73\n","Epoch  19/100 Batch 1400/1562 - Loss:  1.028, Seconds: 3.12\n","Epoch  19/100 Batch 1420/1562 - Loss:  1.127, Seconds: 2.92\n","Epoch  19/100 Batch 1440/1562 - Loss:  1.116, Seconds: 2.92\n","Epoch  19/100 Batch 1460/1562 - Loss:  1.089, Seconds: 2.97\n","Epoch  19/100 Batch 1480/1562 - Loss:  1.055, Seconds: 2.83\n","Epoch  19/100 Batch 1500/1562 - Loss:  1.054, Seconds: 3.13\n","Epoch  19/100 Batch 1520/1562 - Loss:  1.215, Seconds: 3.29\n","Epoch  19/100 Batch 1540/1562 - Loss:  1.091, Seconds: 3.07\n","Average loss for this update: 1.091\n","No Improvement.\n","Epoch  19/100 Batch 1560/1562 - Loss:  1.065, Seconds: 2.91\n","Epoch  20/100 Batch   20/1562 - Loss:  1.271, Seconds: 2.48\n","Epoch  20/100 Batch   40/1562 - Loss:  1.111, Seconds: 2.12\n","Epoch  20/100 Batch   60/1562 - Loss:  1.114, Seconds: 2.55\n","Epoch  20/100 Batch   80/1562 - Loss:  1.085, Seconds: 2.18\n","Epoch  20/100 Batch  100/1562 - Loss:  1.063, Seconds: 2.10\n","Epoch  20/100 Batch  120/1562 - Loss:  1.075, Seconds: 2.53\n","Epoch  20/100 Batch  140/1562 - Loss:  0.949, Seconds: 2.50\n","Epoch  20/100 Batch  160/1562 - Loss:  1.007, Seconds: 2.25\n","Epoch  20/100 Batch  180/1562 - Loss:  0.979, Seconds: 2.33\n","Epoch  20/100 Batch  200/1562 - Loss:  1.035, Seconds: 2.41\n","Epoch  20/100 Batch  220/1562 - Loss:  1.049, Seconds: 2.46\n","Epoch  20/100 Batch  240/1562 - Loss:  1.039, Seconds: 2.51\n","Epoch  20/100 Batch  260/1562 - Loss:  0.969, Seconds: 2.51\n","Epoch  20/100 Batch  280/1562 - Loss:  0.931, Seconds: 2.46\n","Epoch  20/100 Batch  300/1562 - Loss:  0.878, Seconds: 2.47\n","Epoch  20/100 Batch  320/1562 - Loss:  1.000, Seconds: 2.24\n","Epoch  20/100 Batch  340/1562 - Loss:  0.979, Seconds: 2.41\n","Epoch  20/100 Batch  360/1562 - Loss:  1.119, Seconds: 2.64\n","Epoch  20/100 Batch  380/1562 - Loss:  1.057, Seconds: 2.51\n","Epoch  20/100 Batch  400/1562 - Loss:  1.019, Seconds: 2.24\n","Epoch  20/100 Batch  420/1562 - Loss:  0.928, Seconds: 2.53\n","Epoch  20/100 Batch  440/1562 - Loss:  0.919, Seconds: 2.57\n","Epoch  20/100 Batch  460/1562 - Loss:  0.955, Seconds: 2.45\n","Epoch  20/100 Batch  480/1562 - Loss:  1.005, Seconds: 2.53\n","Epoch  20/100 Batch  500/1562 - Loss:  1.089, Seconds: 2.38\n","Average loss for this update: 1.023\n","No Improvement.\n","Stopping Training.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IR0VzES228MB","colab_type":"code","colab":{}},"source":["## Making Our Own Summaries\n","def text_to_seq(text):\n","    '''Prepare the text for the model'''\n","    \n","    text = clean_text(text)\n","    return [vocab_to_int.get(word, vocab_to_int['<UNK>']) for word in text.split()]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cWYzpmJyGNjC","colab_type":"code","outputId":"556e71ee-5d2f-4e9e-a3be-ff61e2dce5fe","executionInfo":{"status":"error","timestamp":1584338589218,"user_tz":-330,"elapsed":1158,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["# Create your own review or use one from the dataset\n","input_sentence = \"The title says it all. Great flavor, hint of spice, excellent crunch. We eat Kettle chips by the truck load at my house, we like all the flavors but this one far and away is our favorite, never enough bags to get us to our next shipment. I just wish Amazon could get the larger bags on subscribe and save! If you buy these make sure you have enough for everyone otherwise you may not get enough for yourself\"\n","text = text_to_seq(input_sentence)\n","random = np.random.randint(0,len(clean_texts))\n","#input_sentence = clean_texts[random]\n","#text = text_to_seq(clean_texts[random])\n","#input_sentence = input(\"summarize text :\")\n","#text = text_to_seq(input_sentence)\n","checkpoint = \"./best_model.ckpt\"\n","\n","loaded_graph = tf.Graph()\n","with tf.Session(graph=loaded_graph) as sess:\n","    # Load saved model\n","    loader = tf.train.import_meta_graph(checkpoint + '.meta')\n","    loader.restore(sess, checkpoint)\n","\n","    input_data = loaded_graph.get_tensor_by_name('input:0')\n","    logits = loaded_graph.get_tensor_by_name('predictions:0')\n","    text_length = loaded_graph.get_tensor_by_name('text_length:0')\n","    summary_length = loaded_graph.get_tensor_by_name('summary_length:0')\n","    keep_prob = loaded_graph.get_tensor_by_name('keep_prob:0')\n","    \n","    #Multiply by batch_size to match the model's input parameters\n","    answer_logits = sess.run(logits, {input_data: [text]*batch_size, \n","                                      summary_length: [np.random.randint(5,8)], \n","                                      text_length: [len(text)]*batch_size,\n","                                      keep_prob: 1.0})[0] \n","# Remove the padding from the tweet\n","pad = vocab_to_int[\"<PAD>\"] \n","\n","print('Original Text:', input_sentence)\n","\n","print('\\nText')\n","print('  Word Ids:    {}'.format([i for i in text]))\n","print('  Input Words: {}'.format(\" \".join([int_to_vocab[i] for i in text])))\n","\n","print('\\nSummary')\n","print('  Word Ids:       {}'.format([i for i in answer_logits if i != pad]))\n","print('  Response Words: {}'.format(\" \".join([int_to_vocab[i] for i in answer_logits if i != pad])))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-573101ea02d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0minput_sentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"The title says it all. Great flavor, hint of spice, excellent crunch. We eat Kettle chips by the truck load at my house, we like all the flavors but this one far and away is our favorite, never enough bags to get us to our next shipment. I just wish Amazon could get the larger bags on subscribe and save! If you buy these make sure you have enough for everyone otherwise you may not get enough for yourself\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtext_to_seq\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_sentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mrandom\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclean_texts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#input_sentence = clean_texts[random]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#text = text_to_seq(clean_texts[random])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-3d736a8ba33c>\u001b[0m in \u001b[0;36mtext_to_seq\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;34m'''Prepare the text for the model'''\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclean_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvocab_to_int\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvocab_to_int\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'<UNK>'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-3-8cb458ffc74a>\u001b[0m in \u001b[0;36mclean_text\u001b[0;34m(text, remove_stopwords)\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mnew_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcontractions\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m                 \u001b[0mnew_text\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontractions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'contractions' is not defined"]}]},{"cell_type":"code","metadata":{"id":"JteviXB9GNnb","colab_type":"code","outputId":"54183d6b-10e8-4e9f-a9f4-0796299d039c","executionInfo":{"status":"ok","timestamp":1584184885529,"user_tz":-330,"elapsed":1923,"user":{"displayName":"SHERYL LINDSAY A 16CS067","photoUrl":"","userId":"11726046882748413314"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(clean_summaries[random])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["nothing with a face\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DUIzGESPPFLV","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mmh2P10uzQKj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}